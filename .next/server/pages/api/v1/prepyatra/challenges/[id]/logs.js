"use strict";(()=>{var e={};e.id=4181,e.ids=[4181],e.modules={8097:e=>{e.exports=require("@sentry/nextjs")},2167:e=>{e.exports=require("axios")},3582:e=>{e.exports=require("cors")},1185:e=>{e.exports=require("mongoose")},1649:e=>{e.exports=require("next-auth/react")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},3160:e=>{e.exports=require("next/dist/lib/import-next-warning")},5828:e=>{e.exports=require("uuid")},6113:e=>{e.exports=require("crypto")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},3328:(e,r,t)=>{t.r(r),t.d(r,{config:()=>p,default:()=>c,routeModule:()=>h});var s={};t.r(s),t.d(s,{default:()=>g});var a=t(1802),n=t(7153),u=t(6249),o=t(5912),i=t(3300),l=t(5166),d=t(3506);let handler=async(e,r)=>{await (0,l.D0)(e,r),await (0,d.uD)();let{method:t}=e;switch(t){case"GET":return handleGetLogs(e,r);case"POST":return handleCreateLog(e,r);default:return r.status(o.uT.METHOD_NOT_ALLOWED).json((0,l.OF)({status:!1,message:`Method ${e.method} Not Allowed`}))}},handleGetLogs=async(e,r)=>{try{let{id:t}=e.query;if(!t)return r.status(o.uT.BAD_REQUEST).json((0,l.OF)({status:!1,message:"Challenge ID is required"}));let s=await i.ChallengeLog.find({challenge:String(t)}).sort({day:1});return r.status(o.uT.OKAY).json((0,l.OF)({status:!0,message:"Logs retrieved successfully",data:s}))}catch(e){return console.error("Get Challenge Logs Error:",e),r.status(o.uT.INTERNAL_SERVER_ERROR).json((0,l.OF)({status:!1,message:"Internal server error",error:e instanceof Error?e.message:"Unknown error"}))}},handleCreateLog=async(e,r)=>{try{let{id:t}=e.query,{day:s,progressText:a,hoursSpent:n,nextGoals:u}=e.body;if(!t)return r.status(o.uT.BAD_REQUEST).json((0,l.OF)({status:!1,message:"Challenge ID is required"}));if(!s||!a||void 0===n)return r.status(o.uT.BAD_REQUEST).json((0,l.OF)({status:!1,message:"Day, progress text, and hours are required"}));let d=await i.ChallengeLog.findOne({challenge:String(t),day:Number(s)});if(d)return r.status(o.uT.BAD_REQUEST).json((0,l.OF)({status:!1,message:"Log already exists for this day"}));let g=new i.ChallengeLog({challenge:String(t),day:Number(s),progressText:a,hoursSpent:Number(n),nextGoals:u||[]});return await g.save(),await i.Challenge.findByIdAndUpdate(t,{currentDay:Math.max(Number(s),e.body.currentDay||0)}),r.status(o.uT.RESOURCE_CREATED).json((0,l.OF)({status:!0,message:"Log created successfully",data:g}))}catch(e){return console.error("Create Challenge Log Error:",e),r.status(o.uT.INTERNAL_SERVER_ERROR).json((0,l.OF)({status:!1,message:"Internal server error",error:e instanceof Error?e.message:"Unknown error"}))}},g=handler,c=(0,u.l)(s,"default"),p=(0,u.l)(s,"config"),h=new a.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/v1/prepyatra/challenges/[id]/logs",pathname:"/api/v1/prepyatra/challenges/[id]/logs",bundlePath:"",filename:""},userland:s})},3506:(e,r,t)=>{t.d(r,{D0:()=>s.D0,uD:()=>s.uD,xM:()=>s.xM});var s=t(7750)}};var r=require("../../../../../../webpack-api-runtime.js");r.C(e);var __webpack_exec__=e=>r(r.s=e),t=r.X(0,[4222,5912,5166,9276,7750,3300],()=>__webpack_exec__(3328));module.exports=t})();