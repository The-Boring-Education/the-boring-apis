"use strict";(()=>{var e={};e.id=272,e.ids=[272],e.modules={8097:e=>{e.exports=require("@sentry/nextjs")},2167:e=>{e.exports=require("axios")},3582:e=>{e.exports=require("cors")},1185:e=>{e.exports=require("mongoose")},3227:e=>{e.exports=require("next-auth")},3598:e=>{e.exports=require("next-auth/providers/google")},1649:e=>{e.exports=require("next-auth/react")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},3160:e=>{e.exports=require("next/dist/lib/import-next-warning")},5828:e=>{e.exports=require("uuid")},6113:e=>{e.exports=require("crypto")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},1566:(e,s,t)=>{t.r(s),t.d(s,{config:()=>R,default:()=>m,routeModule:()=>f});var a={};t.r(a),t.d(a,{default:()=>T});var r=t(1802),u=t(7153),n=t(6249),i=t(3227),o=t(5912),d=t(3300),l=t(5166),c=t(3506),p=t(8133);let handler=async(e,s)=>{try{await (0,c.uD)();let t=await (0,i.getServerSession)(e,s,p.authOptions);if(!t||!t.user)return s.status(o.uT.UNAUTHORIZED).json((0,l.OF)({status:!1,message:"Authentication required"}));let a=await d.User.findOne({email:t.user.email});if(!a)return s.status(o.uT.NOT_FOUND).json((0,l.OF)({status:!1,message:"User not found"}));if("GET"===e.method)return handleGetTasks(e,s,a);if("POST"===e.method)return handleCreateTask(e,s,a);if("PUT"===e.method)return handleUpdateTaskProgress(e,s,a);return s.status(o.uT.METHOD_NOT_ALLOWED).json((0,l.OF)({status:!1,message:"Method not allowed"}))}catch(e){return console.error("Error in DevRel tasks API:",e),s.status(o.uT.INTERNAL_SERVER_ERROR).json((0,l.OF)({status:!1,error:e,message:"Internal server error"}))}},handleGetTasks=async(e,s,t)=>{let{type:a,leadId:r}=e.query;try{let e;if("DEVREL_LEAD"===t.occupation){let a=await d.DevRelLead.findOne({email:t.email});if(!a)return s.status(o.uT.NOT_FOUND).json((0,l.OF)({status:!1,message:"DevRel Lead profile not found"}));e=await d.DevRelTask.findForLead(a._id.toString()).populate("createdBy","name email")}else{if("DEVREL_ADVOCATE"!==t.occupation)return s.status(o.uT.FORBIDDEN).json((0,l.OF)({status:!1,message:"Access denied. Only DevRel members can access tasks."}));e=r&&"string"==typeof r?await d.DevRelTask.findForLead(r).populate("createdBy","name email").populate("assignedTo","name email"):a&&"string"==typeof a?await d.DevRelTask.findByType(a).populate("createdBy","name email").populate("assignedTo","name email"):await d.DevRelTask.find({isActive:!0}).populate("createdBy","name email").populate("assignedTo","name email").sort({createdAt:-1})}return s.status(o.uT.OKAY).json((0,l.OF)({status:!0,data:e,message:"Tasks fetched successfully"}))}catch(e){return console.error("Error fetching tasks:",e),s.status(o.uT.INTERNAL_SERVER_ERROR).json((0,l.OF)({status:!1,error:e,message:"Failed to fetch tasks"}))}},handleCreateTask=async(e,s,t)=>{if("DEVREL_ADVOCATE"!==t.occupation)return s.status(o.uT.FORBIDDEN).json((0,l.OF)({status:!1,message:"Only DevRel Advocates can create tasks"}));let a=e.body,r=["title","description","type"].filter(e=>!a[e]);if(r.length>0)return s.status(o.uT.BAD_REQUEST).json((0,l.OF)({status:!1,message:`Missing required fields: ${r.join(", ")}`}));try{let e=await d.DevRelTask.create({...a,createdBy:t._id});return s.status(o.uT.RESOURCE_CREATED).json((0,l.OF)({status:!0,data:e,message:"Task created successfully"}))}catch(e){return console.error("Error creating task:",e),s.status(o.uT.INTERNAL_SERVER_ERROR).json((0,l.OF)({status:!1,error:e,message:"Failed to create task"}))}},handleUpdateTaskProgress=async(e,s,t)=>{let{taskId:a,status:r,notes:u,submissionUrl:n}=e.body;if(!a||!r)return s.status(o.uT.BAD_REQUEST).json((0,l.OF)({status:!1,message:"Task ID and status are required"}));try{let i;let c=await d.DevRelTask.findById(a);if(!c)return s.status(o.uT.NOT_FOUND).json((0,l.OF)({status:!1,message:"Task not found"}));if("DEVREL_LEAD"===t.occupation){let e=await d.DevRelLead.findOne({email:t.email});if(!e)return s.status(o.uT.NOT_FOUND).json((0,l.OF)({status:!1,message:"DevRel Lead profile not found"}));i=e._id.toString()}else if("DEVREL_ADVOCATE"!==t.occupation)return s.status(o.uT.FORBIDDEN).json((0,l.OF)({status:!1,message:"Access denied"}));else if(!(i=e.body.leadId))return s.status(o.uT.BAD_REQUEST).json((0,l.OF)({status:!1,message:"Lead ID is required for advocates"}));if(await c.updateLeadProgress(i,r,{notes:u,submissionUrl:n}),"completed"===r){let e=await d.DevRelLead.findById(i);e&&(e.performanceMetrics.tasksCompleted+=1,e.performanceMetrics.lastActivityAt=new Date,await e.save())}return s.status(o.uT.OKAY).json((0,l.OF)({status:!0,data:c,message:"Task progress updated successfully"}))}catch(e){return console.error("Error updating task progress:",e),s.status(o.uT.INTERNAL_SERVER_ERROR).json((0,l.OF)({status:!1,error:e,message:"Failed to update task progress"}))}},T=handler,m=(0,n.l)(a,"default"),R=(0,n.l)(a,"config"),f=new r.PagesAPIRouteModule({definition:{kind:u.x.PAGES_API,page:"/api/v1/devrel/tasks",pathname:"/api/v1/devrel/tasks",bundlePath:"",filename:""},userland:a})},3506:(e,s,t)=>{t.d(s,{D0:()=>a.D0,uD:()=>a.uD,xM:()=>a.xM});var a=t(7750)}};var s=require("../../../../webpack-api-runtime.js");s.C(e);var __webpack_exec__=e=>s(s.s=e),t=s.X(0,[4222,5912,5166,9276,7750,3300,8133],()=>__webpack_exec__(1566));module.exports=t})();