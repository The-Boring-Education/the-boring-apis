"use strict";(()=>{var e={};e.id=9345,e.ids=[9345],e.modules={8097:e=>{e.exports=require("@sentry/nextjs")},2167:e=>{e.exports=require("axios")},3582:e=>{e.exports=require("cors")},1185:e=>{e.exports=require("mongoose")},1649:e=>{e.exports=require("next-auth/react")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},3160:e=>{e.exports=require("next/dist/lib/import-next-warning")},5828:e=>{e.exports=require("uuid")},6113:e=>{e.exports=require("crypto")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},5176:(e,t,s)=>{s.r(t),s.d(t,{config:()=>g,default:()=>c,routeModule:()=>m});var a={};s.r(a),s.d(a,{default:()=>$});var r=s(1802),i=s(7153),n=s(6249),o=s(5912),u=s(3300),d=s(5166),l=s(3506);let handler=async(e,t)=>{if(await (0,d.D0)(e,t),"OPTIONS"===e.method){t.status(200).end();return}await (0,l.uD)();let{method:s,query:a}=e,{action:r,userId:i,segment:n,page:u="1",limit:$="20",startDate:c,endDate:g,sortBy:m="createdAt",order:p="desc"}=a;return"GET"!==s?t.status(o.uT.METHOD_NOT_ALLOWED).json((0,d.OF)({status:!1,message:`Method ${s} not allowed`})):handleUserManagementRequest(t,r,i,n,parseInt(u),parseInt($),c,g,m,p)},handleUserManagementRequest=async(e,t,s,a,r,i,n,u,l,$)=>{try{let c=getDateRange(n,u);switch(t){case"segments":return await getUserSegments(e,c);case"details":return await getUserDetails(e,s);case"activity":return await getUserActivity(e,s,c);case"cohort-analysis":return await getCohortAnalysis(e,c);case"retention":return await getRetentionAnalysis(e,c);case"engagement-score":return await getEngagementScores(e,c);case"list":return await getFilteredUsers(e,a,r,i,l,"desc"===$?-1:1,c);case"growth":return await getUserGrowthAnalysis(e,c);case"demographics":return await getUserDemographics(e,c);default:return e.status(o.uT.BAD_REQUEST).json((0,d.OF)({status:!1,message:"Invalid action specified"}))}}catch(t){return e.status(o.uT.INTERNAL_SERVER_ERROR).json((0,d.OF)({status:!1,error:t,message:"Error processing user management request"}))}},getDateRange=(e,t)=>{let s=t?new Date(t):new Date,a=new Date(e||s.getTime()-2592e6);return{start:a,end:s}},getUserSegments=async(e,t)=>{let{start:s,end:a}=t,r=await u.User.aggregate([{$match:{createdAt:{$gte:s,$lte:a}}},{$lookup:{from:"usercourses",localField:"_id",foreignField:"userId",as:"courses"}},{$lookup:{from:"userprojects",localField:"_id",foreignField:"userId",as:"projects"}},{$lookup:{from:"usersheets",localField:"_id",foreignField:"userId",as:"sheets"}},{$addFields:{totalEnrollments:{$add:[{$size:"$courses"},{$size:"$projects"},{$size:"$sheets"}]}}},{$group:{_id:{$switch:{branches:[{case:{$eq:["$totalEnrollments",0]},then:"Inactive"},{case:{$lte:["$totalEnrollments",2]},then:"Low Activity"},{case:{$lte:["$totalEnrollments",5]},then:"Medium Activity"},{case:{$gt:["$totalEnrollments",5]},then:"High Activity"}],default:"Unknown"}},userCount:{$sum:1},averageEnrollments:{$avg:"$totalEnrollments"}}}]),i=await u.User.aggregate([{$match:{createdAt:{$gte:s,$lte:a}}},{$group:{_id:"$occupation",userCount:{$sum:1},onboardedCount:{$sum:{$cond:[{$eq:["$isOnboarded",!0]},1,0]}}}}]),n=await u.User.aggregate([{$match:{createdAt:{$gte:s,$lte:a}}},{$lookup:{from:"payments",localField:"_id",foreignField:"user",as:"payments"}},{$addFields:{totalSpent:{$sum:{$map:{input:"$payments",as:"payment",in:{$cond:[{$eq:["$$payment.isPaid",!0]},"$$payment.amount",0]}}}}}},{$group:{_id:{$switch:{branches:[{case:{$eq:["$totalSpent",0]},then:"Free Users"},{case:{$lte:["$totalSpent",1e3]},then:"Low Value"},{case:{$lte:["$totalSpent",5e3]},then:"Medium Value"},{case:{$gt:["$totalSpent",5e3]},then:"High Value"}],default:"Unknown"}},userCount:{$sum:1},totalRevenue:{$sum:"$totalSpent"}}}]);return e.status(o.uT.OKAY).json((0,d.OF)({status:!0,data:{activitySegments:r,roleSegments:i,revenueSegments:n}}))},getUserDetails=async(e,t)=>{if(!t)return e.status(o.uT.BAD_REQUEST).json((0,d.OF)({status:!1,message:"User ID is required"}));let s=await u.User.findById(t);if(!s)return e.status(o.uT.NOT_FOUND).json((0,d.OF)({status:!1,message:"User not found"}));let[a,r,i]=await Promise.all([u.UserCourse.find({userId:t}).populate("courseId","name slug coverImageURL"),u.UserProject.find({userId:t}).populate("projectId","name slug coverImageURL"),u.UserSheet.find({userId:t}).populate("sheetId","name slug coverImageURL")]),n=await u.Payment.find({user:t}).sort({createdAt:-1}),l=await u.Gamification.findOne({userId:t}),$=a.length+r.length+i.length,c=a.filter(e=>e.isCompleted).length,g=r.filter(e=>{let t=e.sections?.length||0,s=e.sections?.filter(e=>e.chapters?.every(e=>e.isCompleted)).length||0;return t>0&&s===t}).length,m=i.filter(e=>{let t=e.questions?.length||0,s=e.questions?.filter(e=>e.isCompleted).length||0;return t>0&&s===t}).length,p=c+g+m;return e.status(o.uT.OKAY).json((0,d.OF)({status:!0,data:{userInfo:s,learningProgress:{courses:a,projects:r,sheets:i,totalEnrollments:$,totalCompleted:p,engagementScore:parseFloat(($>0?p/$*100:0).toFixed(2))},payments:n,gamificationData:l}}))},getUserActivity=async(e,t,s)=>{if(!t)return e.status(o.uT.BAD_REQUEST).json((0,d.OF)({status:!1,message:"User ID is required"}));let{start:a,end:r}=s,i=await Promise.all([u.UserCourse.find({userId:t,updatedAt:{$gte:a,$lte:r}}).populate("courseId","name").sort({updatedAt:-1}),u.UserProject.find({userId:t,updatedAt:{$gte:a,$lte:r}}).populate("projectId","name").sort({updatedAt:-1}),u.UserSheet.find({userId:t,updatedAt:{$gte:a,$lte:r}}).populate("sheetId","name").sort({updatedAt:-1})]),n=await u.UserCourse.aggregate([{$match:{userId:t,updatedAt:{$gte:a,$lte:r}}},{$group:{_id:{date:{$dateToString:{format:"%Y-%m-%d",date:"$updatedAt"}}},activityCount:{$sum:1}}},{$sort:{"_id.date":1}}]);return e.status(o.uT.OKAY).json((0,d.OF)({status:!0,data:{recentActivity:{courses:i[0],projects:i[1],sheets:i[2]},activityTimeline:n}}))},getCohortAnalysis=async(e,t)=>{let{start:s,end:a}=t,r=await u.User.aggregate([{$match:{createdAt:{$gte:s,$lte:a}}},{$group:{_id:{year:{$year:"$createdAt"},month:{$month:"$createdAt"}},userCount:{$sum:1},onboardedCount:{$sum:{$cond:[{$eq:["$isOnboarded",!0]},1,0]}}}},{$sort:{"_id.year":1,"_id.month":1}}]),i=await u.User.aggregate([{$match:{createdAt:{$gte:s,$lte:a}}},{$lookup:{from:"usercourses",localField:"_id",foreignField:"userId",as:"courses"}},{$addFields:{hasActivity:{$gt:[{$size:"$courses"},0]},daysSinceRegistration:{$divide:[{$subtract:[new Date,"$createdAt"]},864e5]}}},{$group:{_id:{$switch:{branches:[{case:{$lte:["$daysSinceRegistration",7]},then:"Week 1"},{case:{$lte:["$daysSinceRegistration",30]},then:"Month 1"},{case:{$lte:["$daysSinceRegistration",90]},then:"Month 3"},{case:{$gt:["$daysSinceRegistration",90]},then:"3+ Months"}],default:"Unknown"}},totalUsers:{$sum:1},activeUsers:{$sum:{$cond:[{$eq:["$hasActivity",!0]},1,0]}}}},{$project:{totalUsers:1,activeUsers:1,retentionRate:{$multiply:[{$divide:["$activeUsers","$totalUsers"]},100]}}}]);return e.status(o.uT.OKAY).json((0,d.OF)({status:!0,data:{cohortAnalysis:r,retentionAnalysis:i}}))},getRetentionAnalysis=async(e,t)=>{let{start:s,end:a}=t,r=await u.User.aggregate([{$match:{createdAt:{$gte:s,$lte:a}}},{$lookup:{from:"usercourses",let:{userId:"$_id"},pipeline:[{$match:{$expr:{$and:[{$eq:["$userId","$$userId"]},{$gte:["$updatedAt",s]},{$lte:["$updatedAt",a]}]}}}],as:"recentActivity"}},{$addFields:{daysSinceRegistration:{$divide:[{$subtract:[new Date,"$createdAt"]},864e5]},hasRecentActivity:{$gt:[{$size:"$recentActivity"},0]}}},{$group:{_id:{$floor:{$divide:["$daysSinceRegistration",7]}},totalUsers:{$sum:1},activeUsers:{$sum:{$cond:[{$eq:["$hasRecentActivity",!0]},1,0]}}}},{$project:{week:{$add:["$_id",1]},totalUsers:1,activeUsers:1,retentionRate:{$multiply:[{$divide:["$activeUsers","$totalUsers"]},100]}}},{$sort:{week:1}}]);return e.status(o.uT.OKAY).json((0,d.OF)({status:!0,data:{retentionByDays:r}}))},getEngagementScores=async(e,t)=>{let{start:s,end:a}=t,r=await u.User.aggregate([{$match:{createdAt:{$gte:s,$lte:a}}},{$lookup:{from:"usercourses",localField:"_id",foreignField:"userId",as:"courses"}},{$lookup:{from:"userprojects",localField:"_id",foreignField:"userId",as:"projects"}},{$lookup:{from:"usersheets",localField:"_id",foreignField:"userId",as:"sheets"}},{$lookup:{from:"gamifications",localField:"_id",foreignField:"userId",as:"gamification"}},{$addFields:{totalEnrollments:{$add:[{$size:"$courses"},{$size:"$projects"},{$size:"$sheets"}]},completedCourses:{$size:{$filter:{input:"$courses",cond:{$eq:["$$this.isCompleted",!0]}}}},completedProjects:{$size:{$filter:{input:"$projects",cond:{$eq:["$$this.isCompleted",!0]}}}},totalPoints:{$ifNull:[{$arrayElemAt:["$gamification.points",0]},0]}}},{$addFields:{completionRate:{$cond:[{$eq:["$totalEnrollments",0]},0,{$multiply:[{$divide:[{$add:["$completedCourses","$completedProjects"]},"$totalEnrollments"]},100]}]},engagementScore:{$add:[{$multiply:["$totalEnrollments",10]},{$multiply:["$completedCourses",50]},{$multiply:["$completedProjects",100]},{$multiply:["$totalPoints",.1]}]}}},{$group:{_id:{$switch:{branches:[{case:{$lt:["$engagementScore",100]},then:"Low Engagement"},{case:{$lt:["$engagementScore",500]},then:"Medium Engagement"},{case:{$gte:["$engagementScore",500]},then:"High Engagement"}],default:"No Engagement"}},userCount:{$sum:1},averageScore:{$avg:"$engagementScore"},averageCompletionRate:{$avg:"$completionRate"}}}]);return e.status(o.uT.OKAY).json((0,d.OF)({status:!0,data:{engagementScores:r}}))},getFilteredUsers=async(e,t,s,a,r,i,n)=>{let{start:l,end:$}=n,c=(s-1)*a,g={createdAt:{$gte:l,$lte:$}};if("premium"===t){let e=await u.Payment.distinct("user",{isPaid:!0});g._id={$in:e}}else if("onboarded"===t)g.isOnboarded=!0;else if("inactive"===t){let e=await u.UserCourse.distinct("userId",{updatedAt:{$gte:new Date(Date.now()-2592e6)}});g._id={$nin:e}}let m=await u.User.find(g).sort({[r]:i}).skip(c).limit(a).lean(),p=await u.User.countDocuments(g),h=Math.ceil(p/a),f=await Promise.all(m.map(async e=>{let[t,s,a,r]=await Promise.all([u.UserCourse.countDocuments({userId:e._id}),u.UserProject.countDocuments({userId:e._id}),u.UserSheet.countDocuments({userId:e._id}),u.Payment.aggregate([{$match:{user:e._id,isPaid:!0}},{$group:{_id:null,total:{$sum:"$amount"}}}])]);return{...e,metrics:{totalEnrollments:t+s+a,totalSpent:r[0]?.total||0}}}));return e.status(o.uT.OKAY).json((0,d.OF)({status:!0,data:{users:f,pagination:{currentPage:s,totalPages:h,totalUsers:p,hasNext:s<h,hasPrev:s>1}}}))},getUserGrowthAnalysis=async(e,t)=>{let{start:s,end:a}=t,r=await u.User.aggregate([{$match:{createdAt:{$gte:s,$lte:a}}},{$group:{_id:{date:{$dateToString:{format:"%Y-%m-%d",date:"$createdAt"}}},newUsers:{$sum:1}}},{$sort:{"_id.date":1}}]),i=await u.User.aggregate([{$match:{createdAt:{$gte:s,$lte:a}}},{$group:{_id:"$provider",userCount:{$sum:1}}}]);return e.status(o.uT.OKAY).json((0,d.OF)({status:!0,data:{dailyGrowth:r,growthBySource:i}}))},getUserDemographics=async(e,t)=>{let{start:s,end:a}=t,r=await u.User.aggregate([{$match:{createdAt:{$gte:s,$lte:a}}},{$group:{_id:"$occupation",count:{$sum:1}}}]),i=await u.User.aggregate([{$match:{createdAt:{$gte:s,$lte:a}}},{$unwind:"$purpose"},{$group:{_id:"$purpose",count:{$sum:1}}}]);return e.status(o.uT.OKAY).json((0,d.OF)({status:!0,data:{roleDistribution:r,purposeDistribution:i}}))},$=handler,c=(0,n.l)(a,"default"),g=(0,n.l)(a,"config"),m=new r.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/v1/admin/users",pathname:"/api/v1/admin/users",bundlePath:"",filename:""},userland:a})},3506:(e,t,s)=>{s.d(t,{D0:()=>a.D0,uD:()=>a.uD,xM:()=>a.xM});var a=s(7750)}};var t=require("../../../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),s=t.X(0,[4222,5912,5166,9276,7750,3300],()=>__webpack_exec__(5176));module.exports=s})();