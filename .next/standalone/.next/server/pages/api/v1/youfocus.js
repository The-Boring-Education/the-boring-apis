"use strict";(()=>{var e={};e.id=4744,e.ids=[4744],e.modules={8097:e=>{e.exports=require("@sentry/nextjs")},2167:e=>{e.exports=require("axios")},3582:e=>{e.exports=require("cors")},1185:e=>{e.exports=require("mongoose")},1649:e=>{e.exports=require("next-auth/react")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},3160:e=>{e.exports=require("next/dist/lib/import-next-warning")},5828:e=>{e.exports=require("uuid")},6113:e=>{e.exports=require("crypto")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},5459:(e,s,t)=>{t.r(s),t.d(s,{config:()=>E,default:()=>c,routeModule:()=>y});var a={};t.r(a),t.d(a,{default:()=>R});var r=t(1802),u=t(7153),i=t(6249),l=t(5912),d=t(3300),n=t(5166),o=t(3506);let handler=async(e,s)=>{if(await (0,o.D0)(e,s),"OPTIONS"===e.method){s.status(200).end();return}await (0,o.uD)();let{query:t}=e,{userId:a}=t;switch(e.method){case"POST":return handleAddPlaylist(e,s,a);case"GET":return handleGetPlaylists(e,s);default:return s.status(l.uT.BAD_REQUEST).json({success:!1,message:`Method ${e.method} not allowed`})}},handleAddPlaylist=async(e,s,t)=>{let{playlistUrl:a,tags:r}=e.body,u=(0,n.iH)(a);if(!u)return s.status(l.uT.BAD_REQUEST).json({success:!1,message:"Invalid playlist URL"});let{data:i}=await (0,d.checkPlaylistExistsByID)(u);if(i){if(t&&await (0,d.addUserPlaylistToDB)(t,i._id),await (0,d.updateReferredByInPlaylist)(i._id,!0),r){let{data:e}=await (0,d.updateTagsInPlaylist)(i._id,r);return s.status(l.uT.RESOURCE_CREATED).json((0,n.OF)({status:!0,message:"Playlist already exists",data:e}))}return s.status(l.uT.RESOURCE_CREATED).json((0,n.OF)({status:!0,message:"Playlist already exists",data:i}))}try{let e=await (0,n.M2)(u);if(!e)return s.status(l.uT.INTERNAL_SERVER_ERROR).json({success:!1,message:"Failed to fetch playlist data from YouTube"});let{error:a,data:i}=await (0,d.addPlaylistToDB)({...e,tags:r});if(a)return s.status(l.uT.INTERNAL_SERVER_ERROR).json((0,n.OF)({status:!1,message:"Failed to add playlist",error:a}));if(t){let{error:e}=await (0,d.addUserPlaylistToDB)(t,i._id);if(e)return s.status(l.uT.INTERNAL_SERVER_ERROR).json({status:!1,message:"Failed to link user and playlist",error:e})}return s.status(l.uT.RESOURCE_CREATED).json((0,n.OF)({status:!0,message:"Playlist added successfully!",data:i}))}catch(e){return s.status(l.uT.INTERNAL_SERVER_ERROR).json({success:!1,message:"We can't fetch this playlist. Try another one.",error:e})}},handleGetPlaylists=async(e,s)=>{let{data:t,error:a}=await (0,d.getPlaylistsFromDB)();return a?s.status(l.uT.INTERNAL_SERVER_ERROR).json({success:!1,message:"Error fetching playlists",error:a}):s.status(l.uT.OKAY).json((0,n.OF)({status:!0,message:"playlists fetched successfully",data:t}))},R=handler,c=(0,i.l)(a,"default"),E=(0,i.l)(a,"config"),y=new r.PagesAPIRouteModule({definition:{kind:u.x.PAGES_API,page:"/api/v1/youfocus",pathname:"/api/v1/youfocus",bundlePath:"",filename:""},userland:a})},3506:(e,s,t)=>{t.d(s,{D0:()=>a.D0,uD:()=>a.uD,xM:()=>a.xM});var a=t(7750)}};var s=require("../../../webpack-api-runtime.js");s.C(e);var __webpack_exec__=e=>s(s.s=e),t=s.X(0,[4222,5912,5166,9276,7750,3300],()=>__webpack_exec__(5459));module.exports=t})();