"use strict";(()=>{var e={};e.id=9905,e.ids=[9905],e.modules={8097:e=>{e.exports=require("@sentry/nextjs")},2167:e=>{e.exports=require("axios")},3582:e=>{e.exports=require("cors")},1185:e=>{e.exports=require("mongoose")},3227:e=>{e.exports=require("next-auth")},3598:e=>{e.exports=require("next-auth/providers/google")},1649:e=>{e.exports=require("next-auth/react")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},3160:e=>{e.exports=require("next/dist/lib/import-next-warning")},5828:e=>{e.exports=require("uuid")},6113:e=>{e.exports=require("crypto")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},8995:(e,t,a)=>{a.r(t),a.d(t,{config:()=>f,default:()=>m,routeModule:()=>h});var s={};a.r(s),a.d(s,{default:()=>g});var r=a(1802),o=a(7153),n=a(6249),d=a(3227),u=a(5912),i=a(3300),c=a(5166),l=a(3506),p=a(8133);let handler=async(e,t)=>{if("GET"!==e.method)return t.status(u.uT.METHOD_NOT_ALLOWED).json((0,c.OF)({status:!1,message:"Method not allowed"}));try{await (0,l.uD)();let a=await (0,d.getServerSession)(e,t,p.authOptions);if(!a||!a.user)return t.status(u.uT.UNAUTHORIZED).json((0,c.OF)({status:!1,message:"Authentication required"}));let s=await i.User.findOne({email:a.user.email});if(!s)return t.status(u.uT.NOT_FOUND).json((0,c.OF)({status:!1,message:"User not found"}));if("DEVREL_ADVOCATE"===s.occupation)return handleAdvocateDashboard(e,t);if("DEVREL_LEAD"===s.occupation)return handleLeadDashboard(e,t,s.email);return t.status(u.uT.FORBIDDEN).json((0,c.OF)({status:!1,message:"Access denied. Only DevRel members can access dashboard."}))}catch(e){return console.error("Error fetching dashboard data:",e),t.status(u.uT.INTERNAL_SERVER_ERROR).json((0,c.OF)({status:!1,error:e,message:"Internal server error while fetching dashboard data"}))}},handleAdvocateDashboard=async(e,t)=>{try{let e=await i.DevRelLead.aggregate([{$group:{_id:"$status",count:{$sum:1}}},{$group:{_id:null,statusCounts:{$push:{status:"$_id",count:"$count"}},total:{$sum:"$count"}}}]),a=await i.DevRelLead.find({}).populate("reviewedBy","name email").sort({createdAt:-1}).limit(10),s=await i.DevRelLead.find({status:{$in:["approved","offer_sent","offer_accepted","onboarded"]}}).sort({createdAt:-1}),r=await i.DevRelTask.aggregate([{$match:{isActive:!0}},{$group:{_id:"$status",count:{$sum:1}}},{$group:{_id:null,statusCounts:{$push:{status:"$_id",count:"$count"}},total:{$sum:"$count"}}}]),o=await i.DevRelTask.find({dueDate:{$lt:new Date},status:{$ne:"completed"},isActive:!0}),n=e[0]||{statusCounts:[],total:0},d={total:n.total,pending:n.statusCounts.find(e=>"applied"===e.status)?.count||0,approved:n.statusCounts.find(e=>"approved"===e.status)?.count||0,rejected:n.statusCounts.find(e=>"rejected"===e.status)?.count||0},l=r[0]||{statusCounts:[],total:0},p={total:l.total,active:l.statusCounts.filter(e=>["pending","in_progress"].includes(e.status)).reduce((e,t)=>e+t.count,0),completed:l.statusCounts.find(e=>"completed"===e.status)?.count||0,overdue:o.length},g=s.map(e=>({leadId:e._id.toString(),name:e.name,email:e.email,tasksCompleted:e.performanceMetrics.tasksCompleted,completionRate:e.performanceMetrics.tasksAssigned>0?e.performanceMetrics.tasksCompleted/e.performanceMetrics.tasksAssigned*100:0,lastActivity:e.performanceMetrics.lastActivityAt||e.updatedAt})),m={applications:{...d,recent:a},leads:{total:s.length,active:s.filter(e=>"onboarded"===e.status).length,onboarding:s.filter(e=>["approved","offer_sent","offer_accepted"].includes(e.status)).length,performanceData:g},tasks:p};return t.status(u.uT.OKAY).json((0,c.OF)({status:!0,data:m,message:"Advocate dashboard data fetched successfully"}))}catch(e){return console.error("Error fetching advocate dashboard:",e),t.status(u.uT.INTERNAL_SERVER_ERROR).json((0,c.OF)({status:!1,error:e,message:"Failed to fetch advocate dashboard data"}))}},handleLeadDashboard=async(e,t,a)=>{try{let e=await i.DevRelLead.findOne({email:a});if(!e)return t.status(u.uT.NOT_FOUND).json((0,c.OF)({status:!1,message:"DevRel Lead profile not found"}));if(!e.canAccessDashboard)return t.status(u.uT.FORBIDDEN).json((0,c.OF)({status:!1,message:"Dashboard access not granted. Please wait for approval."}));let s=await i.DevRelTask.findForLead(e._id.toString()).populate("createdBy","name email"),r=await i.DevRelTask.find({type:"onboarding",isActive:!0}).sort({createdAt:1}),o=s.reduce((t,a)=>{let s=a.getLeadStatus(e._id.toString()),r=s.status||"pending";if(a.isOverdue&&"completed"!==r)t.overdue.push(a);else switch(r){case"pending":default:t.pending.push(a);break;case"in_progress":t.inProgress.push(a);break;case"completed":t.completed.push(a)}return t},{pending:[],inProgress:[],completed:[],overdue:[]}),n=r.length,d=e.onboardingProgress.completedTasks.length,l={totalTasks:n,completedTasks:d,percentage:n>0?Math.round(d/n*100):0,nextTask:o.pending.find(e=>"onboarding"===e.type)||null},p={lead:e,tasks:o,onboardingProgress:l,performanceMetrics:e.performanceMetrics};return t.status(u.uT.OKAY).json((0,c.OF)({status:!0,data:p,message:"Lead dashboard data fetched successfully"}))}catch(e){return console.error("Error fetching lead dashboard:",e),t.status(u.uT.INTERNAL_SERVER_ERROR).json((0,c.OF)({status:!1,error:e,message:"Failed to fetch lead dashboard data"}))}},g=handler,m=(0,n.l)(s,"default"),f=(0,n.l)(s,"config"),h=new r.PagesAPIRouteModule({definition:{kind:o.x.PAGES_API,page:"/api/v1/devrel/dashboard",pathname:"/api/v1/devrel/dashboard",bundlePath:"",filename:""},userland:s})},3506:(e,t,a)=>{a.d(t,{D0:()=>s.D0,uD:()=>s.uD,xM:()=>s.xM});var s=a(7750)}};var t=require("../../../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),a=t.X(0,[4222,5912,5166,9276,7750,3300,8133],()=>__webpack_exec__(8995));module.exports=a})();