"use strict";exports.id=3300,exports.ids=[3300],exports.modules={3300:(e,t,r)=>{r.r(t),r.d(t,{Certificate:()=>a.KB,Challenge:()=>a.tv,ChallengeLog:()=>a.zN,Coupon:()=>a.wV,Course:()=>a.T0,DevRelLead:()=>a.FQ,DevRelTask:()=>a.z6,Feedback:()=>a.x2,Gamification:()=>a.xp,InterviewSheet:()=>a.Iv,Job:()=>a.oI,JobAggregate:()=>a.tH,Leaderboard:()=>a.s3,Mentorship:()=>a.wu,Notification:()=>a.P_,Payment:()=>a.F6,Playlist:()=>a.gO,PrepLog:()=>a.Kx,PrepYatraSubscription:()=>a.J4,Project:()=>a.IK,Quiz:()=>a.x8,QuizAttempt:()=>a.bE,QuizSession:()=>a.PQ,Recruiter:()=>a.BL,User:()=>a.n5,UserCourse:()=>a.HU,UserInterest:()=>a._H,UserPlaylist:()=>a.eu,UserProject:()=>a.cK,UserQuestionPerformance:()=>a.FP,UserQuizAnalytics:()=>a.nL,UserSheet:()=>a.b0,Webinar:()=>a.Rr,addACertificateToDB:()=>addACertificateToDB,addACourseToDB:()=>addACourseToDB,addAInterviewSheetToDB:()=>addAInterviewSheetToDB,addANotificationToDB:()=>addANotificationToDB,addAProjectToDB:()=>addAProjectToDB,addAQuizToDB:()=>addAQuizToDB,addAWebinarToDB:()=>addAWebinarToDB,addChapterToCourseInDB:()=>addChapterToCourseInDB,addChapterToSectionInDB:()=>addChapterToSectionInDB,addFeedbackToDB:()=>addFeedbackToDB,addGamificationDocInDB:()=>l.Z4,addJobToDB:()=>addJobToDB,addLeaderboardTopperToDB:()=>addLeaderboardTopperToDB,addPaymentToDB:()=>addPaymentToDB,addPlaylistToDB:()=>addPlaylistToDB,addPrepLogToDB:()=>addPrepLogToDB,addQuestionToInterviewSheetInDB:()=>addQuestionToInterviewSheetInDB,addRecruiterToDB:()=>addRecruiterToDB,addSectionToProjectInDB:()=>addSectionToProjectInDB,addUserPlaylistToDB:()=>addUserPlaylistToDB,addUserQuizAttemptToDB:()=>addUserQuizAttemptToDB,appendQuestionsToQuizInDB:()=>appendQuestionsToQuizInDB,applyCouponToSheetsFromDB:()=>applyCouponToSheetsFromDB,checkCertificateExistForAProgram:()=>checkCertificateExistForAProgram,checkPaymentStatusFromDB:()=>checkPaymentStatusFromDB,checkPlaylistExistsByID:()=>checkPlaylistExistsByID,checkUserRegistrationInWebinarDB:()=>checkUserRegistrationInWebinarDB,completeQuizSessionInDB:()=>completeQuizSessionInDB,connectToDatabase:()=>g.vO,createChallengeInDB:()=>createChallengeInDB,createChallengeLogInDB:()=>createChallengeLogInDB,createCouponFromDB:()=>createCouponFromDB,createObjectId:()=>g.vl,createQuizSessionInDB:()=>createQuizSessionInDB,createSubscriptionInDB:()=>createSubscriptionInDB,createUserInDB:()=>createUserInDB,createUserInterestInDB:()=>createUserInterestInDB,deleteACourseFromDBById:()=>deleteACourseFromDBById,deleteANotificationsFromDB:()=>deleteANotificationsFromDB,deleteAWebinarFromDB:()=>deleteAWebinarFromDB,deleteChallengeInDB:()=>deleteChallengeInDB,deleteChapterFromSectionInDB:()=>deleteChapterFromSectionInDB,deleteCouponFromDB:()=>deleteCouponFromDB,deleteCourseChapterByIdFromDB:()=>deleteCourseChapterByIdFromDB,deletePlaylistByTagFromDB:()=>deletePlaylistByTagFromDB,deletePlaylistFromDB:()=>deletePlaylistFromDB,deletePrepLogInDB:()=>deletePrepLogInDB,deleteProjectFromDB:()=>deleteProjectFromDB,deleteQuestionFromSheetInDB:()=>deleteQuestionFromSheetInDB,deleteRecruiterInDB:()=>deleteRecruiterInDB,deleteSectionFromProjectInDB:()=>deleteSectionFromProjectInDB,deleteUserPlaylistFromDB:()=>deleteUserPlaylistFromDB,disconnectFromDatabase:()=>g.M,enrollInACourse:()=>enrollInACourse,enrollInAProject:()=>enrollInAProject,enrollInASheet:()=>enrollInASheet,fetchJobsAggregationFromDB:()=>fetchJobsAggregationFromDB,findCouponByCodeFromDB:()=>findCouponByCodeFromDB,generateLeaderboard:()=>generateLeaderboard,getACourseForUserFromDB:()=>getACourseForUserFromDB,getACourseFromDBById:()=>getACourseFromDBById,getAProjectForUserFromDB:()=>getAProjectForUserFromDB,getASheetForUserFromDB:()=>getASheetForUserFromDB,getActionsWithinDateRange:()=>l.Ft,getActiveSessionsFromDB:()=>getActiveSessionsFromDB,getActiveSubscriptionByUserFromDB:()=>getActiveSubscriptionByUserFromDB,getAllCouponsFromDB:()=>getAllCouponsFromDB,getAllCourseFromDB:()=>getAllCourseFromDB,getAllDocumentsFromModel:()=>getAllDocumentsFromModel,getAllEnrolledCoursesFromDB:()=>getAllEnrolledCoursesFromDB,getAllEnrolledProjectsFromDB:()=>getAllEnrolledProjectsFromDB,getAllEnrolledSheetsFromDB:()=>getAllEnrolledSheetsFromDB,getAllInterviewSheetsFromDB:()=>getAllInterviewSheetsFromDB,getAllJobsFromDB:()=>getAllJobsFromDB,getAllMenteesFromDB:()=>getAllMenteesFromDB,getAllNotificationsFromDB:()=>getAllNotificationsFromDB,getAllQuestionsByUser:()=>getAllQuestionsByUser,getAllUsersWithLogsFromDB:()=>getAllUsersWithLogsFromDB,getAllWebinarsFromDB:()=>getAllWebinarsFromDB,getCertificateById:()=>getCertificateById,getChallengeLogsByIdFromDB:()=>getChallengeLogsByIdFromDB,getChallengeProgressFromDB:()=>getChallengeProgressFromDB,getChallengeStatsFromDB:()=>getChallengeStatsFromDB,getChallengesByUserFromDB:()=>getChallengesByUserFromDB,getChapterFromSectionInDB:()=>getChapterFromSectionInDB,getChaptersFromSectionInDB:()=>getChaptersFromSectionInDB,getCouponByIdFromDB:()=>getCouponByIdFromDB,getCourseBySlugFromDB:()=>getCourseBySlugFromDB,getCourseBySlugWithUserFromDB:()=>getCourseBySlugWithUserFromDB,getEnrolledCourseFromDB:()=>getEnrolledCourseFromDB,getEnrolledProjectFromDB:()=>getEnrolledProjectFromDB,getEnrolledSheetFromDB:()=>getEnrolledSheetFromDB,getInterviewSheetByIDFromDB:()=>getInterviewSheetByIDFromDB,getInterviewSheetBySlugFromDB:()=>getInterviewSheetBySlugFromDB,getJobByJobIdFromDB:()=>getJobByJobIdFromDB,getLatestJobAggregationFromDB:()=>getLatestJobAggregationFromDB,getLeaderboardEntriesFromDB:()=>getLeaderboardEntriesFromDB,getLeaderboardFromDB:()=>l.Ih,getLeaderboardWithUsersFromDB:()=>getLeaderboardWithUsersFromDB,getPYUserByIdFromDB:()=>getPYUserByIdFromDB,getPaymentByOrderIdFromDB:()=>getPaymentByOrderIdFromDB,getPlaylistByIdFromDB:()=>getPlaylistByIdFromDB,getPlaylistByTagFromDB:()=>getPlaylistByTagFromDB,getPlaylistsFromDB:()=>getPlaylistsFromDB,getPrepLogsByUserFromDB:()=>getPrepLogsByUserFromDB,getProjectByIDFromDB:()=>getProjectByIDFromDB,getProjectBySlugFromDB:()=>getProjectBySlugFromDB,getProjectBySlugWithUserFromDB:()=>getProjectBySlugWithUserFromDB,getProjectsFromDB:()=>getProjectsFromDB,getQuizAdminAnalyticsFromDB:()=>getQuizAdminAnalyticsFromDB,getQuizByIdFromDB:()=>getQuizByIdFromDB,getQuizCategoriesFromDB:()=>getQuizCategoriesFromDB,getQuizCategoriesWithCountsFromDB:()=>getQuizCategoriesWithCountsFromDB,getQuizLeaderboardFromDB:()=>getQuizLeaderboardFromDB,getRecruitersByUserFromDB:()=>getRecruitersByUserFromDB,getResumeEvaluationResultsFromDB:()=>getResumeEvaluationResultsFromDB,getSectionsFromProjectInDB:()=>getSectionsFromProjectInDB,getStarredQuestionsFromDB:()=>getStarredQuestionsFromDB,getTotalCountFromModel:()=>getTotalCountFromModel,getUserAnalyticsFromDB:()=>getUserAnalyticsFromDB,getUserByEmailFromDB:()=>getUserByEmailFromDB,getUserByIdFromDB:()=>getUserByIdFromDB,getUserByUserNameFromDB:()=>getUserByUserNameFromDB,getUserCertificates:()=>getUserCertificates,getUserDataByUserNameFromDB:()=>getUserDataByUserNameFromDB,getUserInterestsFromDB:()=>getUserInterestsFromDB,getUserPlaylistsFromDB:()=>getUserPlaylistsFromDB,getUserPointsFromDB:()=>l.fo,getUserPrepLogStats:()=>getUserPrepLogStats,getUserQuizAdminAnalyticsFromDB:()=>userQuizAttempt_getQuizAdminAnalyticsFromDB,getUserQuizHistoryFromDB:()=>getUserQuizHistoryFromDB,getUserQuizLeaderboardFromDB:()=>getLeaderboardFromDB,getUserQuizPerformanceFromDB:()=>getUserQuizPerformanceFromDB,getUserQuizSessionsFromDB:()=>getUserQuizSessionsFromDB,getUserQuizStatsFromDB:()=>getUserQuizStatsFromDB,getWebinarBySlugFromDB:()=>getWebinarBySlugFromDB,getWebinarDetailsFromDB:()=>getWebinarDetailsFromDB,handleGamificationPoints:()=>l.handleGamificationPoints,incrementCouponUsageFromDB:()=>incrementCouponUsageFromDB,isUserMenteeInDB:()=>isUserMenteeInDB,markQuestionCompletedByUser:()=>markQuestionCompletedByUser,markQuestionStarredByUser:()=>markQuestionStarredByUser,onboardPrepYatraUserTODB:()=>onboardPrepYatraUserTODB,onboardUserToDB:()=>onboardUserToDB,recalculateUserPrepLogStats:()=>recalculateUserPrepLogStats,removeCouponFromSheetFromDB:()=>removeCouponFromSheetFromDB,saveDailyJobsAggregationToDB:()=>saveDailyJobsAggregationToDB,saveLeaderboardToDB:()=>saveLeaderboardToDB,saveQuizAttemptToDB:()=>saveQuizAttemptToDB,sendEmailFromDB:()=>sendEmailFromDB,submitAnswerInDB:()=>submitAnswerInDB,toObjectId:()=>toObjectId,toggleMentorshipInDB:()=>toggleMentorshipInDB,updateACourseInDB:()=>updateACourseInDB,updateANotificationInDB:()=>updateANotificationInDB,updateAQuizInDB:()=>updateAQuizInDB,updateCertificateToUserShikshaCourseDoc:()=>updateCertificateToUserShikshaCourseDoc,updateChallengeInDB:()=>updateChallengeInDB,updateChapterInSectionInDB:()=>updateChapterInSectionInDB,updateCouponFromDB:()=>updateCouponFromDB,updateCourseChapterInDB:()=>updateCourseChapterInDB,updateFeedbackTextInDB:()=>updateFeedbackTextInDB,updateInterviewQuestionInDB:()=>updateInterviewQuestionInDB,updateInterviewSheetInDB:()=>updateInterviewSheetInDB,updatePYUserByIdInDB:()=>updatePYUserByIdInDB,updatePaymentStatusToDB:()=>updatePaymentStatusToDB,updatePrepLogInDB:()=>updatePrepLogInDB,updateProjectInDB:()=>updateProjectInDB,updateRecruiterInDB:()=>updateRecruiterInDB,updateReferredByInPlaylist:()=>updateReferredByInPlaylist,updateSectionInProjectInDB:()=>updateSectionInProjectInDB,updateTagsInPlaylist:()=>updateTagsInPlaylist,updateUserAnalyticsInDB:()=>updateUserAnalyticsInDB,updateUserCourseChapterInDB:()=>updateUserCourseChapterInDB,updateUserInterestInDB:()=>updateUserInterestInDB,updateUserPlaylistData:()=>updateUserPlaylistData,updateUserPointsInDB:()=>l.PS,updateUserPrepLogStreak:()=>updateUserPrepLogStreak,updateUserProjectChapterInDB:()=>updateUserProjectChapterInDB,updateUserQuestionPerformance:()=>updateUserQuestionPerformance,updateUserSkillsInDB:()=>updateUserSkillsInDB,updateUserSubscriptionStatusInDB:()=>updateUserSubscriptionStatusInDB,updateWebinarInDB:()=>updateWebinarInDB,validateCouponForProductFromDB:()=>validateCouponForProductFromDB});var a=r(7074),n=r(2215);let addACertificateToDB=async e=>{try{let t=new n.Z(e);return await t.save(),{data:t}}catch(e){return{error:e}}},checkCertificateExistForAProgram=async(e,t,r)=>{try{let a=await n.Z.findOne({type:e,userId:t,programId:r});if(a)return{data:a};return{error:"Certificate does not exist"}}catch(e){return{error:"Failed while checking certificate existence"}}},getCertificateById=async e=>{try{let t=await n.Z.findById(e);if(t)return{data:t};return{error:"Certificate not found"}}catch(e){return{error:"Failed while fetching certificate"}}},getUserCertificates=async e=>{try{let t=await n.Z.find({userId:e});if(t.length>0)return{data:t};return{error:"No certificates found"}}catch(e){return{error:"Failed while fetching certificates"}}};var i=r(1185),o=r.n(i);let getTotalCountFromModel=async e=>{try{let t=await e.countDocuments();return{data:t}}catch(e){return{error:"Error while counting documents"}}},getAllDocumentsFromModel=async(e,t=1,r=100,a=null,n={createdAt:-1})=>{try{let i=(t-1)*r,o=e.find().sort(n).skip(i).limit(r);a&&o.populate(a);let s=await o.exec(),d=await e.countDocuments();return{data:{items:s,total:d,currentPage:t,totalPages:Math.ceil(d/r)}}}catch(e){return{error:"Error while fetching documents"}}},toObjectId=e=>e instanceof o().Types.ObjectId?e:new(o()).Types.ObjectId(e);var s=r(5976);let findCouponByCodeFromDB=async e=>{try{let t=await s.Z.findOne({code:e.toUpperCase()});if(!t)return{error:"Coupon not found"};return{data:t}}catch(e){return{error:"Failed to find coupon"}}},validateCouponForProductFromDB=async(e,t,r,a)=>{try{let r=await s.Z.findOne({code:e.toUpperCase()});if(!r)return{error:"Coupon not found"};if(!r.isActive)return{error:"Coupon is inactive"};if(r.isExpired)return{error:"Coupon has expired"};if(r.isUsageLimitReached)return{error:"Coupon usage limit reached"};if(r.applicableProducts.length>0&&!r.applicableProducts.includes(t))return{error:"Coupon not applicable to this product"};return{data:r}}catch(e){return{error:"Failed to validate coupon"}}},getCouponByIdFromDB=async e=>{try{let t=await s.Z.findById(e);if(!t)return{error:"Coupon not found"};return{data:t}}catch(e){return{error:"Failed to get coupon"}}},getAllCouponsFromDB=async()=>{try{let e=await s.Z.find({}).populate("createdBy","name email").sort({createdAt:-1});return{data:e}}catch(e){return{error:"Failed to fetch coupons"}}},createCouponFromDB=async e=>{try{let t=await s.Z.findOne({code:e.code.toUpperCase()});if(t)return{error:"Coupon with this code already exists"};if(new Date(e.expiryDate)<=new Date)return{error:"Expiry date must be in the future"};let r=new s.Z({...e,code:e.code.toUpperCase()}),a=await r.save();return await a.populate("createdBy","name email"),{data:a}}catch(e){if("ValidationError"===e.name){let t=Object.values(e.errors).map(e=>e.message);return{error:t.join(", ")}}if(11e3===e.code)return{error:"Coupon with this code already exists"};return{error:"Failed to create coupon"}}},updateCouponFromDB=async(e,t)=>{try{let r=await s.Z.findById(e);if(!r)return{error:"Coupon not found"};if(t.code){let r=await s.Z.findOne({code:t.code.toUpperCase(),_id:{$ne:e}});if(r)return{error:"Coupon with this code already exists"};t.code=t.code.toUpperCase()}if(t.expiryDate&&new Date(t.expiryDate)<=new Date)return{error:"Expiry date must be in the future"};let a=await s.Z.findByIdAndUpdate(e,t,{new:!0,runValidators:!0}).populate("createdBy","name email");if(!a)return{error:"Failed to update coupon"};return{data:a}}catch(e){if("ValidationError"===e.name){let t=Object.values(e.errors).map(e=>e.message);return{error:t.join(", ")}}if(11e3===e.code)return{error:"Coupon with this code already exists"};return{error:"Failed to update coupon"}}},deleteCouponFromDB=async e=>{try{let t=await s.Z.findByIdAndDelete(e);if(!t)return{error:"Coupon not found"};return{data:t}}catch(e){return{error:"Failed to delete coupon"}}},applyCouponToSheetsFromDB=async(e,t)=>{try{let r=await s.Z.findById(e);if(!r)return{error:"Coupon not found"};let a=Array.from(new Set((Array.isArray(r.applicableProducts)?r.applicableProducts:[]).concat(t))),n=await s.Z.findByIdAndUpdate(e,{applicableProducts:a},{new:!0}).populate("createdBy","name email");return{data:n}}catch(e){return{error:"Failed to apply coupon to sheets"}}},removeCouponFromSheetFromDB=async(e,t)=>{try{let r=await s.Z.findById(e);if(!r)return{error:"Coupon not found"};let a=r.applicableProducts.filter(e=>e!==t),n=await s.Z.findByIdAndUpdate(e,{applicableProducts:a},{new:!0}).populate("createdBy","name email");return{data:n}}catch(e){return{error:"Failed to remove coupon from sheet"}}},incrementCouponUsageFromDB=async e=>{try{let t=await s.Z.findByIdAndUpdate(e,{$inc:{currentUsage:1}},{new:!0});if(!t)return{error:"Coupon not found"};return{data:t}}catch(e){return{error:"Failed to increment coupon usage"}}};var d=r(9276);let sendEmailFromDB=async e=>{try{let t={from_email:e.from_email||"theboringeducation@gmail.com",from_name:e.from_name||"TBE",to_email:e.to_email,to_name:e.to_name,subject:e.subject,html_content:e.html_content},r=await d.emailClient.sendEmail(t);if(r.success)return{data:r};return{error:r.error||"Failed to send email"}}catch(e){return{error:"Email service error"}}},addFeedbackToDB=async({rating:e,type:t,ref:r,userId:n})=>{try{let i=new a.x2({rating:e,type:t,ref:r,user:n,feedback:""});return await i.save(),{data:i}}catch(e){return{error:"Failed to create feedback"}}},updateFeedbackTextInDB=async({feedbackId:e,userId:t,feedback:r})=>{try{let n=await a.x2.findOne({_id:e,user:t});if(!n)return{error:"Feedback not found"};return n.feedback=r,await n.save(),{data:n}}catch(e){return{error:"Failed to update feedback text"}}};var u=r(5912),l=r(7144);let addAInterviewSheetToDB=async e=>{try{let t=new a.Iv(e);return await t.save(),{data:t}}catch(e){return{error:e}}},getAllInterviewSheetsFromDB=async()=>{try{let e=await a.Iv.find().select(u.U9.coursePreview).exec();if(!e)return{error:"InterviewSheet not found"};return{data:e}}catch(e){return{error:e}}},getInterviewSheetBySlugFromDB=async(e,t)=>{try{let r=await a.Iv.findOne({slug:e});if(!r)return{error:"Sheet not found"};let n=!1,i=r.questions.map(e=>e.toObject());if(t){let e=await a.b0.findOne({userId:t,sheetId:r._id});n=!!e,e&&(i=r.questions.map(t=>{let r=e.questions.find(e=>e.questionId.toString()===t._id.toString());return{...t.toObject(),isCompleted:r?.isCompleted||!1,isStarred:r?.isStarred||!1}}))}return{data:{...r.toObject(),isEnrolled:n,questions:i}}}catch(e){return{error:e}}},getInterviewSheetByIDFromDB=async e=>{try{let t=await a.Iv.findOne({_id:e});if(!t)return{error:"Sheet not found"};return{data:t}}catch(e){return{error:e}}},updateInterviewSheetInDB=async({sheetId:e,updatedData:t})=>{try{let r=await a.Iv.findByIdAndUpdate(e,t,{new:!0});if(!r)return{error:"Sheet does not exists"};return{data:r}}catch(e){return{error:"Failed while updating sheet"}}},updateInterviewQuestionInDB=async(e,t,{title:r,question:n,answer:i,frequency:o})=>{try{let s=await a.Iv.findOneAndUpdate({_id:e,"questions._id":t},{$set:{"questions.$.title":r,"questions.$.question":n,"questions.$.answer":i,"questions.$.frequency":o}},{new:!0});return{data:s}}catch(e){return{error:"Failed to update chapter to course"}}},deleteQuestionFromSheetInDB=async(e,t)=>{try{let r=await a.Iv.findOneAndUpdate({_id:e},{$pull:{questions:{_id:t}}},{new:!0});return{data:r}}catch(e){return{error:"Failed to delete question from sheet"}}},addQuestionToInterviewSheetInDB=async(e,t)=>{try{let r=await a.Iv.findOneAndUpdate({_id:e},{$push:{questions:t}},{new:!0});if(!r)return{error:"Interview sheet not found"};return{data:r}}catch(e){return{error:"Failed to add question to interview sheet"}}},enrollInASheet=async({userId:e,sheetId:t})=>{try{let r=await a.Iv.findById(t).lean();if(!r)return{error:"Sheet not found"};let n=r.questions.map(e=>({questionId:e._id,isCompleted:!1})),i=await a.b0.create({userId:e,sheetId:t,questions:n});return await (0,l.PS)(e,"ENROLL_SHEET"),{data:i}}catch(e){return{error:"Failed while enrolling in a sheet"}}},getEnrolledSheetFromDB=async({userId:e,sheetId:t})=>{try{let r=await a.b0.findOne({userId:e,sheetId:t});return{data:r}}catch(e){return{error:"Failed while fetching enrolled sheet"}}},getAllEnrolledSheetsFromDB=async e=>{try{let t=await a.b0.find({userId:e}).populate({path:"sheet",select:u.U9.coursePreview}).exec();return{data:t.map(e=>({...e.sheet.toObject(),isEnrolled:!0}))}}catch(e){return{error:"Failed while fetching enrolled sheets"}}},markQuestionCompletedByUser=async(e,t,r,n)=>{try{let i=await a.b0.findOneAndUpdate({userId:e,sheetId:t,"questions.questionId":r},{$set:{"questions.$.isCompleted":n}},{new:!0});if(!i)return{error:"User or question not found"};return{data:i}}catch(e){return{error:"Failed to mark question as completed"}}},getAllQuestionsByUser=async e=>{try{let t=await a.b0.find({userId:e}).populate("questions.questionId");if(!t.length)return{data:[],error:"No questions found for this user"};let r=t.flatMap(e=>e.questions);return{data:r,error:null}}catch(e){return{data:null,error:"Error fetching questions from the database"}}},getASheetFromDBById=async(e,t)=>{try{let r=await a.Iv.findById(e);if(!r)return{error:"Sheet not found"};if(t){let{data:a}=await getEnrolledSheetFromDB({userId:t,sheetId:e});return{data:{...r.toObject(),isEnrolled:!!a}}}return{data:r}}catch(e){return{error:`Failed while fetching a sheet ${e}`}}},getASheetForUserFromDB=async(e,t)=>{try{let r=await a.b0.findOne({userId:e,sheetId:t}).populate({path:"sheet"}).exec();if(!r){let{data:e}=await getASheetFromDBById(t);return{data:{...e.toObject(),isEnrolled:!1}}}let n=r.sheet.questions.map(e=>{let t=r.questions.find(t=>t.questionId.toString()===e._id.toString());return{...e.toObject(),isCompleted:t?.isCompleted,isStarred:t?.isStarred}}),i={...r.sheet.toObject(),questions:n};return{data:{...i,isEnrolled:!0}}}catch(e){return{error:"Failed to fetch courses with chapter status"}}},markQuestionStarredByUser=async(e,t,r,n)=>{try{let i=toObjectId(r),o=await a.b0.findOneAndUpdate({userId:e,sheetId:t,"questions.questionId":i},{$set:{"questions.$.isStarred":n}},{new:!0});if(!o)return{error:"User or question not found"};return{data:o}}catch(e){return{error:"Failed to mark question as starred"}}},getStarredQuestionsFromDB=async(e,t)=>{try{let r=await a.b0.findOne({userId:e,sheetId:t});if(!r)return{data:[],error:"UserSheet not found"};let n=r.questions.filter(e=>!0===e.isStarred);return{data:n}}catch(e){return{error:"Failed to get starred questions"}}};var c=r(7147),p=r.n(c),m=r(1017),y=r.n(m);let addLeaderboardTopperToDB=async e=>{try{let t=await a.s3.create(e);return{data:t}}catch(e){return{error:e.message||"Error saving leaderboard winner"}}},getLeaderboardEntriesFromDB=async e=>{try{let t=await a.s3.find(e?{type:e}:{}).sort({date:-1});return{data:t}}catch(e){return{error:e.message||"Error fetching leaderboard entries"}}},saveLeaderboardToDB=async(e,t)=>{try{let r=await a.s3.findOneAndUpdate({type:e},{type:e,entries:t,date:new Date},{upsert:!0,new:!0});return{data:r}}catch(e){return{error:e.message||"Failed to save leaderboard"}}},getLeaderboardWithUsersFromDB=async e=>{try{let t=await a.s3.findOne({type:e}).sort({date:-1}).populate("entries.userId","name image");return{data:t}}catch(e){return{error:e.message||"Error fetching leaderboard with users"}}},getStartDateByType=e=>{let t=new Date;if("DAILY"===e)t.setHours(0,0,0,0);else if("WEEKLY"===e){let e=t.getDay();t.setDate(t.getDate()-e),t.setHours(0,0,0,0)}else"MONTHLY"===e&&(t.setDate(1),t.setHours(0,0,0,0));return t},generateLeaderboard=async e=>{let t=getStartDateByType(e),r=new Date,n=await a.xp.find(),i={};n.forEach(e=>{let a=e.actions.filter(e=>void 0!==e.createdAt&&e.createdAt>=t&&e.createdAt<=r),n=a.reduce((e,t)=>e+(t.pointsEarned||0),0);n>0&&(i[e.userId.toString()]=(i[e.userId.toString()]||0)+n)});let o=Object.entries(i).sort((e,t)=>t[1]-e[1]).map(([e,t])=>({userId:e,points:t})),s=y().join(process.cwd(),"public","leaderboards");return p().existsSync(s)||p().mkdirSync(s,{recursive:!0}),p().writeFileSync(y().join(s,`${e.toLowerCase()}.json`),JSON.stringify(o,null,2)),o.length>0&&o[0],o},addANotificationToDB=async e=>{try{let t=new a.P_(e);return await t.save(),{data:t}}catch(e){return{error:e}}},getAllNotificationsFromDB=async()=>{try{let e=await a.P_.find();return{data:e}}catch(e){return{error:e}}},updateANotificationInDB=async e=>{try{let{notificationId:t,...r}=e,n=await a.P_.findOneAndUpdate({_id:t},{$set:r},{new:!0});return{data:n}}catch(e){return{error:e}}},deleteANotificationsFromDB=async e=>{try{let t=await a.P_.findOneAndDelete({_id:e});if(!t)return{error:"Notification not found"};return{data:t}}catch(e){return{error:e}}},addPaymentToDB=async({userId:e,productId:t,productType:r,amount:n,orderId:i,paymentLink:o,appliedCoupon:s,couponCode:d})=>{try{let u=new a.F6({user:e,productId:t,productType:r,amount:n,orderId:i,paymentLink:o,isPaid:!1,...s&&{appliedCoupon:s},...d&&{couponCode:d}});return await u.save(),{data:u}}catch(e){return{error:"Failed to save payment to DB"}}},getPaymentByOrderIdFromDB=async e=>{try{let t=await a.F6.findOne({orderId:e});if(!t)return{error:"Payment not found"};return{data:t}}catch(e){return{error:"Failed to find payment"}}},updatePaymentStatusToDB=async({orderId:e,paymentId:t,status:r})=>{try{let n=await a.F6.findOne({orderId:e});if(!n)return{error:"Payment not found"};return n.isPaid="SUCCESS"===r,t&&(n.paymentId=t),await n.save(),{data:n}}catch(e){return{error:`Failed to update payment status: ${e.message}`}}},checkPaymentStatusFromDB=async(e,t)=>{try{let r=await a.J4.findOne({userId:e,isActive:!0});if(r)return{data:{purchased:!0}};let n=await a.F6.findOne({user:e,productId:t});if(!n)return{data:{purchased:!1},error:"No payment record found"};if(n.isPaid)return{data:{purchased:!0}};return{data:{purchased:!1},error:"Payment not completed"}}catch(e){return{error:"Error checking payment status"}}},getRecruitersByUserFromDB=async e=>{try{let t=await a.BL.find({user:new(o()).Types.ObjectId(e)}).sort({updatedAt:-1});return{data:t}}catch(e){return{error:"Failed to fetch recruiters from DB"}}},addRecruiterToDB=async e=>{try{let{userId:t,recruiterName:r,...n}=e,i={user:t,recruiterName:r,...n},o=new a.BL(i);return await o.save(),{data:o}}catch(e){return{error:"Error while saving recruiter to DB"}}},updateRecruiterInDB=async(e,t)=>{try{let r=await a.BL.findByIdAndUpdate(e,t,{new:!0});if(!r)return{error:"Recruiter not found"};return{data:r}}catch(e){return{error:"Failed to update recruiter"}}},deleteRecruiterInDB=async e=>{try{let t=await a.BL.findByIdAndDelete(e);if(!t)return{error:"Recruiter not deleted"};return{data:t}}catch(e){return{error:"Failed to update recruiter: "}}},addPrepLogToDB=async({userId:e,title:t,description:r,timeSpent:n})=>{try{let i=await a.Kx.create({user:e,title:t,description:r,timeSpent:n});return await updateUserPrepLogStreak(e),{data:i}}catch(e){return{error:e.message}}},getPrepLogsByUserFromDB=async e=>{try{let t=await a.Kx.find({user:e}).sort({createdAt:-1});return{data:t}}catch(e){return{error:e.message}}},updatePrepLogInDB=async(e,t)=>{try{let r=await a.Kx.findByIdAndUpdate(e,t,{new:!0});if(!r)return{error:"Prep log not found"};return{data:r}}catch(e){return{error:e.message}}},deletePrepLogInDB=async e=>{try{let t=await a.Kx.findByIdAndDelete(e);if(!t)return{error:"Log not found"};try{await recalculateUserPrepLogStats(t.user.toString())}catch(e){console.error("Failed to recalculate user stats after deletion:",e)}return{data:t}}catch(e){return{error:e.message}}},getActiveSubscriptionByUserFromDB=async(e,t)=>{try{let r=await a.J4.findOne({userId:new(o()).Types.ObjectId(e),type:t,isActive:!0,expiryDate:{$gt:new Date}});return{data:r}}catch(e){return{error:"Failed to fetch active subscription from DB"}}},createSubscriptionInDB=async({userId:e,type:t,amount:r,duration:n,expiryDate:i,features:s})=>{try{let d=await a.J4.create({userId:new(o()).Types.ObjectId(e),type:t,amount:r,duration:n,expiryDate:i,features:s,startDate:new Date,isActive:!0});return{data:d}}catch(e){return{error:"Failed to create subscription in DB"}}},updateUserSubscriptionStatusInDB=async({userId:e,subscriptionStatus:t,subscriptionExpiry:r})=>{try{let n=await a.n5.updateOne({userId:new(o()).Types.ObjectId(e)},{subscriptionStatus:t,subscriptionExpiry:r});return{data:n}}catch(e){return{error:"Failed to update user subscription status in DB"}}},getPYUserByIdFromDB=async e=>{try{let t=await a.n5.findById(e);return{data:t}}catch(e){return{error:"Failed to fetch user from DB"}}},updatePYUserByIdInDB=async(e,t,r={new:!0})=>{try{let n=await a.n5.findByIdAndUpdate(e,t,r);return{data:n}}catch(e){return{error:"Failed to update user in DB"}}},updateUserPrepLogStreak=async e=>{try{let t=await a.n5.findById(e);if(!t)return{error:"User not found"};let n=new Date;n.setHours(0,0,0,0);let i=new Date(n);i.setDate(i.getDate()-1);let o=t.prepYatra?.prepLog?.lastLoggedDate?new Date(t.prepYatra.prepLog.lastLoggedDate):null,s=t.prepYatra?.prepLog?.currentStreak||0,d=t.prepYatra?.prepLog?.longestStreak||0,u=(t.prepYatra?.prepLog?.totalLogs||0)+1;if(o&&o>=n)return await a.n5.findByIdAndUpdate(e,{"prepYatra.prepLog.totalLogs":u}),{data:{message:"Already logged today"}};let l=s;for(let t of(o&&o>=i?s+=1:s=1,s>d&&(d=s),await a.n5.findByIdAndUpdate(e,{"prepYatra.prepLog.currentStreak":s,"prepYatra.prepLog.longestStreak":d,"prepYatra.prepLog.lastLoggedDate":n,"prepYatra.prepLog.totalLogs":u},{new:!0}),[3,7,15,30]))if(s===t&&l<t)try{let{handleGamificationPoints:a}=await Promise.resolve().then(r.bind(r,7144));await a(!0,e,`PREPLOG_STREAK_${t}`)}catch(e){console.error("Gamification streak reward failed:",e)}return{data:{currentStreak:s,longestStreak:d,totalLogs:u,streakMilestone:s}}}catch(e){return{error:e.message}}},getUserPrepLogStats=async e=>{try{let t=await a.n5.findById(e);if(!t)return{error:"User not found"};let r=new Date;r.setHours(0,0,0,0);let n=t.prepYatra?.prepLog||{currentStreak:0,longestStreak:0,lastLoggedDate:null,totalLogs:0},i=!!n.lastLoggedDate&&new Date(n.lastLoggedDate)>=r,o=new Date(r);o.setDate(o.getDate()-6);let s=await a.Kx.find({user:e,createdAt:{$gte:o}}).sort({createdAt:-1});return{data:{...n,hasLoggedToday:i,recentLogs:s.length,weeklyLogs:s}}}catch(e){return{error:e.message}}},recalculateUserPrepLogStats=async e=>{try{let t=await a.n5.findById(e);if(!t)return{error:"User not found"};let r=await a.Kx.find({user:e}).sort({createdAt:1});if(0===r.length)return await a.n5.findByIdAndUpdate(e,{"prepYatra.prepLog.currentStreak":0,"prepYatra.prepLog.longestStreak":0,"prepYatra.prepLog.lastLoggedDate":null,"prepYatra.prepLog.totalLogs":0}),{data:{message:"Stats reset to zero"}};let n=r.length,i=new Map;r.forEach(e=>{let t=e.createdAt;if(t){let e=new Date(t).toISOString().split("T")[0];e&&i.set(e,(i.get(e)||0)+1)}});let o=Array.from(i.keys()).sort(),s=0,d=0,u=null;if(o.length>0){let e=new Date;e.setHours(0,0,0,0);let t=e.toISOString().split("T")[0],r=o[o.length-1];r&&(u=new Date(r));let a=0,n=new Date(e);for(t&&o.includes(t)&&(a=1,n.setDate(n.getDate()-1));n>=new Date("1900-01-01");){let e=n.toISOString().split("T")[0];if(e&&o.includes(e))a++,n.setDate(n.getDate()-1);else break}s=a;let i=0,l=0,c=null;for(let e of o){let t=new Date(e);if(c){let e=Math.floor((t.getTime()-c.getTime())/864e5);1===e?l++:(i=Math.max(i,l),l=1)}else l=1;c=t}d=i=Math.max(i,l)}return await a.n5.findByIdAndUpdate(e,{"prepYatra.prepLog.currentStreak":s,"prepYatra.prepLog.longestStreak":d,"prepYatra.prepLog.lastLoggedDate":u,"prepYatra.prepLog.totalLogs":n},{new:!0}),{data:{currentStreak:s,longestStreak:d,totalLogs:n,lastLoggedDate:u}}}catch(e){return{error:e.message}}},getAllUsersWithLogsFromDB=async()=>{try{let e=await a.n5.find({"prepYatra.pyOnboarded":!0}).select("_id name email userName image prepYatra createdAt").sort({createdAt:-1}).lean(),t=await a.Kx.find().sort({createdAt:-1}).lean(),r={};for(let e of t){let t=String(e.user);r[t]||(r[t]=[]),r[t].push(e)}let n=e.map(e=>({...e,logs:r[e._id.toString()]||[],totalLogs:r[e._id.toString()]?.length||0,prepLogStats:e.prepYatra?.prepLog||{currentStreak:0,longestStreak:0,lastLoggedDate:null,totalLogs:0}}));return{data:{users:n,totalUsers:n.length}}}catch(e){return{error:e.message}}},getAllMenteesFromDB=async()=>{try{let e=await a.wu.find().populate("user","_id name email userName image prepYatra createdAt").sort({createdAt:-1}).lean(),t=e.map(e=>String(e.user._id)),r=await a.Kx.find({user:{$in:t}}).sort({createdAt:-1}).lean(),n={};for(let e of r){let t=String(e.user);n[t]||(n[t]=[]),n[t].push(e)}let i=e.map(e=>{let t=e.user;return{...t,logs:n[t._id.toString()]||[],totalLogs:n[t._id.toString()]?.length||0,prepLogStats:t.prepYatra?.prepLog||{currentStreak:0,longestStreak:0,lastLoggedDate:null,totalLogs:0},mentorshipSelectedAt:e.selectedAt,mentorshipNote:e.note}});return{data:{mentees:i,totalMentees:i.length}}}catch(e){return{error:e.message}}},isUserMenteeInDB=async e=>{try{let t=await a.wu.findOne({user:e});return{data:{isMentee:!!t}}}catch(e){return{error:e.message}}},toggleMentorshipInDB=async(e,t,r)=>{try{if(t){let t=await a.wu.findOne({user:e});if(t)return t.note=r||t.note,t.selectedAt=new Date,await t.save(),{data:t};let n=await a.wu.create({user:e,note:r});return{data:n}}{let t=await a.wu.findOneAndDelete({user:e});return{data:t}}}catch(e){return{error:e.message}}},getChallengesByUserFromDB=async e=>{try{let t=await a.tv.find({user:new(o()).Types.ObjectId(e)}).sort({createdAt:-1});return{data:t}}catch(e){return{error:"Failed to fetch challenges from DB"}}},createChallengeInDB=async e=>{try{let t={user:new(o()).Types.ObjectId(e.userId),name:e.name,description:e.description,totalDays:e.totalDays,isPredefined:e.isPredefined,predefinedType:e.predefinedType,startDate:new Date,gamificationPoints:0},r=new a.tv(t);return await r.save(),{data:r}}catch(e){return{error:e.message||"Error while creating challenge in DB"}}},updateChallengeInDB=async(e,t)=>{try{let r=await a.tv.findByIdAndUpdate(e,t,{new:!0});if(!r)return{error:"Challenge not found"};return{data:r}}catch(e){return{error:"Failed to update challenge"}}},deleteChallengeInDB=async e=>{try{await a.zN.deleteMany({challenge:e});let t=await a.tv.findByIdAndDelete(e);if(!t)return{error:"Challenge not found"};return{data:t}}catch(e){return{error:"Failed to delete challenge"}}},getChallengeLogsByIdFromDB=async e=>{try{let t=await a.zN.find({challenge:new(o()).Types.ObjectId(e)}).sort({day:1});return{data:t}}catch(e){return{error:"Failed to fetch challenge logs from DB"}}},createChallengeLogInDB=async e=>{try{let t=await a.tv.findById(e.challengeId);if(!t)return{error:"Challenge not found"};let r=t.currentDay+1,n=await a.zN.findOne({challenge:e.challengeId,day:r});if(n)return{error:"This day has already been logged"};let i={challenge:new(o()).Types.ObjectId(e.challengeId),user:new(o()).Types.ObjectId(e.userId),day:r,progressText:e.progressText,hoursSpent:e.hoursSpent,date:new Date,copiedToPrepLogs:e.copyToPrepLogs||!1,gamificationPoints:10},s=new a.zN(i);if(await s.save(),await a.tv.findByIdAndUpdate(e.challengeId,{currentDay:r,$inc:{gamificationPoints:10},...r>=t.totalDays&&{status:"completed",endDate:new Date}}),e.copyToPrepLogs){let n={userId:e.userId,title:`${t.name} - Day ${r}`,description:e.progressText,timeSpent:e.hoursSpent},i=await addPrepLogToDB(n);i.data&&await a.zN.findByIdAndUpdate(s._id,{prepLogId:i.data._id})}return{data:s}}catch(e){return{error:e.message||"Error while creating challenge log in DB"}}},getChallengeProgressFromDB=async e=>{try{let t=await a.tv.findById(e);if(!t)return{error:"Challenge not found"};let r=await a.zN.find({challenge:new(o()).Types.ObjectId(e)}).sort({day:1}),n=r.reduce((e,t)=>e+t.hoursSpent,0),i=r.length>0?n/r.length:0,s=Math.round(t.currentDay/t.totalDays*100),d=Math.max(0,t.totalDays-t.currentDay),u=0,l=r.sort((e,t)=>e.day-t.day);for(let e=0;e<l.length;e++){let t=l[e],r=e>0?l[e-1]:null;0===e||t&&r&&t.day===r.day+1?u++:u=1}let c={challenge:t,logs:r,completionPercentage:s,daysRemaining:d,streak:u,totalHoursSpent:n,averageHoursPerDay:i};return{data:c}}catch(e){return{error:e.message||"Failed to fetch challenge progress"}}},getChallengeStatsFromDB=async()=>{try{let[e,t,r,n,i]=await Promise.all([a.tv.countDocuments(),a.tv.countDocuments({status:"active"}),a.tv.countDocuments({status:"completed"}),a.tv.distinct("user").then(e=>e.length),a.zN.countDocuments()]),o=await a.tv.aggregate([{$match:{isPredefined:!0}},{$group:{_id:"$predefinedType",count:{$sum:1}}},{$sort:{count:-1}},{$limit:5}]),s=new Date;s.setDate(s.getDate()-30);let d=await a.zN.countDocuments({createdAt:{$gte:s}});return{data:{totalChallenges:e,activeChallenges:t,completedChallenges:r,totalUsers:n,totalLogs:i,popularTypes:o,recentActivity:d}}}catch(e){return{error:e.message||"Failed to fetch challenge stats"}}},addAProjectToDB=async({name:e,slug:t,description:r,coverImageURL:n,requiredSkills:i,roadmap:o,difficultyLevel:s})=>{try{let d=new a.IK({name:e,slug:t,description:r,coverImageURL:n,requiredSkills:i,roadmap:o,difficultyLevel:s});try{await d.save()}catch(e){return{error:e}}return{data:d}}catch(e){return{error:e}}},getProjectsFromDB=async()=>{try{let e=await a.IK.find();return{data:e}}catch(e){return{error:e}}},getProjectBySlugFromDB=async e=>{try{let t=await a.IK.findOne({slug:e});if(!t)return{error:"Project not found"};return{data:t}}catch(e){return{error:e}}},getProjectBySlugWithUserFromDB=async(e,t)=>{try{let r=await a.IK.findOne({slug:e});if(!r)return{error:"Project not found"};if(t){let{data:e,error:a}=await getAProjectForUserFromDB(t,r.id);if(a)return{error:a};return{data:e}}return{data:{...r.toObject(),isEnrolled:!1,sections:r.sections.map(e=>({...e.toObject(),chapters:e.chapters.map(e=>({...e.toObject(),isCompleted:!1}))}))}}}catch(e){return{error:e}}},getProjectByIDFromDB=async(e,t)=>{try{let r=await a.IK.findOne({_id:e});if(!r)return{error:"Project not found"};if(t){let{data:a}=await getEnrolledProjectFromDB({userId:t,projectId:e});return{data:{...r.toObject(),isEnrolled:!!a}}}return{data:r}}catch(e){return{error:`Failed while fetching a project: ${e}`}}},updateProjectInDB=async({projectId:e,updatedData:t})=>{try{let r=await a.IK.findOneAndUpdate({_id:e},{$set:t},{new:!0});if(!r)return{error:"Project not found"};return{data:r}}catch(e){return{error:e}}},deleteProjectFromDB=async e=>{try{let t=await a.IK.findOneAndDelete({_id:e});if(!t)return{error:"Project not found"};return{data:t}}catch(e){return{error:e}}},addSectionToProjectInDB=async(e,t)=>{try{let r=await a.IK.findOne({_id:e});if(!r)return{error:"Project not found"};return r.sections.push(t.toObject()),await r.save(),{data:r}}catch(e){return{error:"Section not added"}}},getSectionsFromProjectInDB=async e=>{try{let t=await a.IK.findOne({_id:e});if(!t)return{error:"Project not found"};return{data:t.sections}}catch(e){return{error:"Section not fetched"}}},updateSectionInProjectInDB=async({projectId:e,sectionId:t,updatedSectionName:r})=>{try{let n=await a.IK.findOne({_id:e});if(!n)return{error:"Project not found"};let i=n.sections.find(e=>e.sectionId===t);if(!i)return{error:"Section not found"};i.sectionName=r,await n.save();let o=n.sections.findIndex(e=>e.sectionId===t);return{data:n.sections[o]}}catch(e){return{error:"Error updating section"}}},deleteSectionFromProjectInDB=async({projectId:e,sectionId:t})=>{try{let r=await a.IK.findById(e);if(!r)return{error:"Project not found"};let n=r.sections.findIndex(e=>e.sectionId===t);if(-1===n)return{error:"Section not found"};return r.sections.splice(n,1),await r.save(),{}}catch(e){return{error:"Error deleting section"}}},addChapterToSectionInDB=async(e,t,r)=>{try{let n=await a.IK.findOne({_id:e});if(!n)return{error:"Project not found"};let i=n.sections.find(e=>e.sectionId.toString()===t);if(!i)return{error:"Section not found"};return i.chapters.push(r.toObject()),await n.save(),{data:n}}catch(e){return{error:"Chapter not added"}}},getChaptersFromSectionInDB=async(e,t)=>{try{let r=await a.IK.findOne({_id:e});if(!r)return{error:"Project not found"};let n=r.sections.find(e=>e.sectionId.toString()===t);if(!n)return{error:"Section not found"};return{data:n.chapters}}catch(e){return{error:"Error fetching chapters"}}},getChapterFromSectionInDB=async(e,t,r)=>{try{let n=await a.IK.findById(e);if(!n)return{error:"Project not found"};let i=n.sections.find(e=>e.sectionId.toString()===t);if(!i)return{error:"Section not found"};let o=i.chapters.find(e=>e.chapterId.toString()===r);if(!o)return{error:"Chapter not found"};return{data:o}}catch(e){return{error:"Error fetching chapter"}}},updateChapterInSectionInDB=async({projectId:e,sectionId:t,chapterId:r,updatedChapterName:n,updatedChapterContent:i,updatedIsOptional:o})=>{try{let s=await a.IK.findOne({_id:e});if(!s)return{error:"Project not found"};let d=s.sections.find(e=>e.sectionId.toString()===t);if(!d)return{error:"Section not found"};let u=d.chapters.find(e=>e.chapterId.toString()===r);if(!u)return{error:"Chapter not found"};return n&&(u.chapterName=n),i&&(u.content=i),null!=o&&(u.isOptional=o),await s.save(),{data:s}}catch(e){return{error:"Chapter not updated"}}},deleteChapterFromSectionInDB=async({projectId:e,sectionId:t,chapterId:r})=>{try{let n=await a.IK.findById(e);if(!n)return{error:"Project not found"};let i=n.sections.find(e=>e.sectionId.toString()===t);if(!i)return{error:"Section not found"};let o=i.chapters.findIndex(e=>e.chapterId.toString()===r);if(-1===o)return{error:"Chapter not found"};return i.chapters.splice(o,1),await n.save(),{data:"Chapter deleted successfully"}}catch(e){return{error:"Error deleting chapter"}}},updateUserProjectChapterInDB=async({userId:e,projectId:t,sectionId:r,chapterId:n,isCompleted:i})=>{try{let o=await a.cK.findOne({userId:e,projectId:t});if(!o)return{error:"User project not found"};let s=o.sections.findIndex(e=>e.sectionId.toString()===r.toString());if(-1===s)return{error:"Section not found in user project"};let d=o.sections[s];if(!d)return{error:"Section not found in user project"};let u=d.chapters.findIndex(e=>e.chapterId.toString()===n.toString());if(-1===u)d.chapters.push({chapterId:n,isCompleted:i});else{let e=d.chapters[u];e&&(e.isCompleted=i)}return await o.save(),{data:o}}catch(e){return{error:"Failed to update chapter in user project"}}},enrollInAProject=async({userId:e,projectId:t})=>{try{let r=await a.IK.findById(t).lean();if(!r)return{error:"Project not found"};let n=r.sections.map(e=>({sectionId:e.sectionId,chapters:e.chapters.map(e=>({chapterId:e.chapterId,isCompleted:!1}))})),i=await a.cK.create({userId:e,projectId:t,sections:n});return await (0,l.PS)(e,"ENROLL_PROJECT"),{data:i}}catch(e){return{error:`Failed while enrolling in a project ${e}`}}},getAllEnrolledProjectsFromDB=async e=>{try{let t=await a.cK.find({userId:e}).populate({path:"project",select:u.U9.projectPreview}).exec(),r=t.map(e=>e.projectId),n=await a.IK.find({_id:{$in:r}}).select(u.U9.projectPreview).exec();return{data:n}}catch(e){return{error:"Failed while fetching enrolled projects"}}},getEnrolledProjectFromDB=async({userId:e,projectId:t})=>{try{let r=await a.cK.findOne({userId:e,projectId:t});return{data:r}}catch(e){return{error:"Failed while fetching enrolled project"}}},getAProjectForUserFromDB=async(e,t)=>{try{let r=await a.cK.findOne({userId:e,projectId:t}).exec(),n=await a.IK.findById(t).exec();if(!n)return{error:"Project not found"};if(!r)return{data:{...n.toObject(),sections:n.sections||[],isEnrolled:!1}};let i=r.sections.map(e=>{let t=n.sections.find(t=>t.sectionId===e.sectionId),r=t?.chapters.map(t=>{let r=e.chapters.some(e=>e.chapterId===t.chapterId&&e.isCompleted);return{...t.toObject(),isCompleted:!!r}});return{...t?.toObject(),chapters:r}});return{data:{...n.toObject(),sections:i,isEnrolled:!0}}}catch(e){return{error:"Failed to fetch project with task status"}}},addAQuizToDB=async e=>{try{let t=new a.x8(e);return await t.save(),{data:t}}catch(e){return{error:"Failed while adding quiz",details:e}}},updateAQuizInDB=async({id:e,updatedData:t})=>{try{let r=await a.x8.findByIdAndUpdate(e,t,{new:!0,runValidators:!0});if(!r)return{error:"Quiz does not exist"};return{data:r}}catch(e){return{error:"Failed while updating quiz"}}},getQuizCategoriesFromDB=async e=>{try{let t=await a.x8.find(e?{}:{isActive:!0},"_id categoryName categoryDescription categoryIcon isActive").lean();return{data:t}}catch(e){return{error:"Failed while fetching quiz categories"}}},getQuizByIdFromDB=async(e,t)=>{try{let r=await a.x8.findOne(t?{_id:e}:{_id:e,isActive:!0}).lean();if(!r)return{error:"Quiz not found"};return{data:r}}catch(e){return{error:"Failed while fetching quiz"}}},getQuizCategoriesWithCountsFromDB=async e=>{try{let t=await a.x8.aggregate([{$match:e?{}:{isActive:!0}},{$project:{_id:1,categoryName:1,categoryDescription:1,categoryIcon:1,isActive:1,questionCount:{$size:{$ifNull:["$questions",[]]}}}}]);return{data:t}}catch(e){return{error:"Failed while fetching quiz categories with counts"}}},appendQuestionsToQuizInDB=async(e,t)=>{try{if(!Array.isArray(t)||0===t.length)return{error:"Questions must be a non-empty array"};let r=await a.x8.findByIdAndUpdate(e,{$push:{questions:{$each:t}}},{new:!0,runValidators:!0});if(!r)return{error:"Quiz not found"};return{data:r}}catch(e){return{error:"Failed while appending questions to quiz"}}},saveQuizAttemptToDB=async e=>{try{let t=new a.bE(e),r=await t.save();return{data:r}}catch(e){return{error:"Failed while saving quiz attempt"}}},getUserQuizHistoryFromDB=async({userId:e,limit:t=20,quizId:r})=>{try{let n=a.bE.find({userId:e});r&&(n=n.where("quizId").equals(r));let i=await n.sort({completedAt:-1}).limit(t).lean();return{data:i}}catch(e){return{error:"Failed while fetching quiz history"}}},getUserQuizStatsFromDB=async e=>{try{let t=await a.bE.aggregate([{$match:{userId:e}},{$group:{_id:null,totalQuizzes:{$sum:1},totalPoints:{$sum:"$pointsEarned"},totalCorrectAnswers:{$sum:"$correctAnswers"},totalQuestions:{$sum:"$totalQuestions"},averageScore:{$avg:"$score"},averageTimeTaken:{$avg:"$timeTaken"}}},{$project:{_id:0,totalQuizzes:1,totalPoints:1,totalCorrectAnswers:1,totalQuestions:1,averageScore:{$round:["$averageScore",2]},averageTimeTaken:{$round:["$averageTimeTaken",0]},overallAccuracy:{$round:[{$multiply:[{$divide:["$totalCorrectAnswers","$totalQuestions"]},100]},2]}}}]);return{data:t[0]||{totalQuizzes:0,totalPoints:0,totalCorrectAnswers:0,totalQuestions:0,averageScore:0,averageTimeTaken:0,overallAccuracy:0}}}catch(e){return{error:"Failed while fetching quiz statistics"}}},addACourseToDB=async e=>{try{let t=new a.T0(e);return await t.save(),{data:t}}catch(e){return{error:"Failed while adding course"}}},updateACourseInDB=async({courseId:e,updatedData:t})=>{try{let r=await a.T0.findByIdAndUpdate(e,t,{new:!0});if(!r)return{error:"Course does not exists"};return{data:r}}catch(e){return{error:"Failed while updating course"}}},deleteACourseFromDBById=async e=>{try{let t=await a.T0.findByIdAndDelete(e);if(!t)return{error:"Course not found"};return{data:"Course deleted"}}catch(e){return{error:"Failed while deleting course"}}},getAllCourseFromDB=async()=>{try{let e=await a.T0.find().select(u.U9.coursePreview).exec();if(!e)return{error:"Course not found"};return{data:e}}catch(e){return{error:`Failed while fetching a course ${e}`}}},getACourseFromDBById=async(e,t)=>{try{let r=await a.T0.findById(e);if(!r)return{error:"Course not found"};if(t){let{data:a}=await getEnrolledCourseFromDB({userId:t,courseId:e});return{data:{...r.toObject(),isEnrolled:!!a}}}return{data:r}}catch(e){return{error:`Failed while fetching a course ${e}`}}},addChapterToCourseInDB=async(e,t)=>{try{let r=await a.T0.findOneAndUpdate({_id:e},{$push:{chapters:t}},{new:!0});if(!r)return{error:"Course not found"};return{data:r}}catch(e){return{error:"Failed to add chapter to course"}}},updateCourseChapterInDB=async(e,t,{name:r,content:n,isOptional:i})=>{try{let o=await a.T0.findOneAndUpdate({_id:e,"chapters._id":t},{$set:{"chapters.$.chapterName":r,"chapters.$.content":n,"chapters.$.isOptional":i}},{new:!0});return{data:o}}catch(e){return{error:"Failed to update chapter to course"}}},deleteCourseChapterByIdFromDB=async(e,t)=>{try{let r=await a.T0.findOneAndUpdate({_id:e},{$pull:{chapters:{_id:t}}},{new:!0});return{data:r}}catch(e){return{error:"Failed to delete chapter from course"}}},enrollInACourse=async({userId:e,courseId:t})=>{try{let r=await a.T0.findById(t).lean();if(!r)return{error:"Course not found"};let n=r.chapters.map(e=>({chapterId:e._id,isCompleted:!1})),i=await a.HU.create({userId:e,courseId:t,chapters:n});return await (0,l.PS)(e,"ENROLL_COURSE"),{data:i}}catch(e){return{error:"Failed while enrolling in a course"}}},getEnrolledCourseFromDB=async({userId:e,courseId:t})=>{try{let r=await a.HU.findOne({userId:e,courseId:t});return{data:r}}catch(e){return{error:"Failed while fetching enrolled course"}}},getAllEnrolledCoursesFromDB=async e=>{try{let t=await a.HU.find({userId:e}).populate({path:"course",select:u.U9.coursePreview}).exec();return{data:t.map(e=>({...e.course.toObject(),isEnrolled:!0}))}}catch(e){return{error:"Failed while fetching enrolled course"}}},getCourseBySlugFromDB=async e=>{try{let t=await a.T0.findOne({slug:e});if(!t)return{error:"Course not found"};return{data:t}}catch(e){return{error:e}}},getCourseBySlugWithUserFromDB=async(e,t)=>{try{let r=await a.T0.findOne({slug:e});if(!r)return{error:"Course not found"};let n=!1,i=r.chapters.map(e=>e.toObject());if(t){let e=await a.HU.findOne({userId:t,courseId:r._id});n=!!e,e&&(i=r.chapters.map(t=>{let r=e.chapters.find(e=>e.chapterId.toString()===t._id.toString());return{...t.toObject(),isCompleted:r?.isCompleted||!1}}))}return{data:{...r.toObject(),isEnrolled:n,chapters:i}}}catch(e){return{error:e}}},updateUserCourseChapterInDB=async({userId:e,courseId:t,chapterId:r,isCompleted:n})=>{try{let i=await a.HU.findOne({userId:e,courseId:t});if(!i)return{error:"User course not found"};let o=i.chapters.findIndex(e=>e.chapterId.toString()===r.toString());if(-1===o)i.chapters.push({chapterId:r,isCompleted:n});else{let e=i.chapters[o];e&&(e.isCompleted=n)}let s=i.chapters.every(e=>e.isCompleted);return i.isCompleted=s,await i.save(),{data:i}}catch(e){return{error:"Failed to update chapter in user course"}}},getACourseForUserFromDB=async(e,t)=>{try{let r=await a.HU.findOne({userId:e,courseId:t}).populate({path:"course"}).exec();if(!r){let{data:e}=await getACourseFromDBById(t);return{data:{...e.toObject(),isEnrolled:!1}}}let n=r.course.chapters.map(e=>{let t=r.chapters.find(t=>t.chapterId.toString()===e._id.toString())?.isCompleted;return{...e.toObject(),isCompleted:t}}),i={...r.course.toObject(),chapters:n,isCompleted:r.isCompleted,certificateId:r.certificateId};return{data:{...i,isEnrolled:!0}}}catch(e){return{error:"Failed to fetch courses with chapter status"}}},updateCertificateToUserShikshaCourseDoc=async(e,t,r)=>{try{let n=await a.HU.findOneAndUpdate({userId:e,courseId:t},{isCompleted:!0,certificateId:r},{new:!0});if(!n)return{error:"User course not found"};return{data:n}}catch(e){return{error:"Failed to update certificate status in user course"}}};var g=r(5166);let addJobToDB=async e=>{try{let t=new a.oI(e),r=await t.save();return{data:r}}catch(e){return{error:e}}},getAllJobsFromDB=async(e={},t=1,r=10)=>{try{let n=(t-1)*r,i=await a.oI.find(e).sort({createdAt:-1}).skip(n).limit(r).lean(),o=await a.oI.countDocuments(e);return{data:{jobs:i,total:o,currentPage:t,totalPages:Math.ceil(o/r),pageSize:r}}}catch(e){return{error:e}}},getJobByJobIdFromDB=async e=>{try{if(!e||"string"!=typeof e)return{error:"Invalid job ID"};let t=await a.oI.findOne({job_id:e}).lean();if(!t)return{error:"Job not found"};return{data:t}}catch(e){return{error:e}}},fetchJobsAggregationFromDB=async()=>{try{let e=await a.oI.aggregate([{$unwind:"$skills"},{$group:{_id:"$skills",totalJobs:{$sum:1}}},{$project:{name:"$_id",count:"$totalJobs",_id:0}},{$sort:{count:-1}},{$limit:20}]),t=await a.oI.aggregate([{$match:{location:{$exists:!0,$not:{$size:0}}}},{$unwind:"$location"},{$project:{location:{$trim:{input:"$location"}}}},{$group:{_id:"$location",count:{$sum:1}}},{$project:{name:"$_id",count:1,_id:0}},{$sort:{count:-1}},{$limit:20}]),r=await a.oI.aggregate([{$unwind:"$role"},{$group:{_id:"$role",totalJobs:{$sum:1}}},{$project:{name:"$_id",count:"$totalJobs",_id:0}},{$sort:{count:-1}},{$limit:20}]),n=await a.oI.aggregate([{$group:{_id:{$switch:{branches:[{case:{$lte:["$company.emp_count",50]},then:"Startup"},{case:{$and:[{$gt:["$company.emp_count",50]},{$lte:["$company.emp_count",250]}]},then:"Mid-Size"},{case:{$gt:["$company.emp_count",250]},then:"MNC"}],default:"Unknown"}},totalCompanies:{$sum:1}}},{$project:{name:"$_id",count:"$totalCompanies",_id:0}}]);return{data:{trendingSkills:e,topLocations:t,jobDomains:r,companyTypes:n}}}catch(e){return{error:e}}},saveDailyJobsAggregationToDB=async()=>{try{let{data:e,error:t}=await fetchJobsAggregationFromDB();if(t||!e)return{error:"Failed to generate job aggregation data"};let r=new a.tH({trendingSkills:e.trendingSkills,topLocations:e.topLocations,jobDomains:e.jobDomains,companyTypes:e.companyTypes});return await r.save(),{data:r}}catch(e){return{error:"Failed to save job aggregation to DB"}}},getLatestJobAggregationFromDB=async()=>{try{let e=await a.tH.findOne().sort({createdAt:-1}).lean();if(!e)return{data:null};return{data:e}}catch(e){return{error:"Failed to fetch latest job aggregation data"}}},getResumeEvaluationResultsFromDB=async({skills:e,domains:t,experience:r})=>{try{let n=await a.oI.find({role:{$in:t},"experience.min":{$lte:r.max},"experience.max":{$gte:r.min}}),i={},o=n.length,s=0;n.forEach(e=>{e.skills.forEach(e=>{let t=e.trim().toLowerCase();i[t]=(i[t]||0)+1}),Array.isArray(e.location)&&e.location.some(e=>"remote"===e.toLowerCase())&&(s+=1)});let d=Object.entries(i).sort((e,t)=>t[1]-e[1]).slice(0,15).map(([e,t])=>{let r=(0,g.O6)(Math.round(t/o*100),0,100);return{skill:e,frequency:t,percentage:r}}),u=e.map(e=>e.trim().toLowerCase()),l=d.filter(e=>!u.includes(e.skill)),c=d.filter(e=>u.includes(e.skill)),p=d.reduce((e,t)=>e+t.percentage,0),m=c.reduce((e,t)=>e+t.percentage,0),y=(0,g.O6)(Math.round(m/(p||1)*100),0,100),f=await a.oI.aggregate([{$match:{role:{$in:t},"experience.min":{$lte:r.max},"experience.max":{$gte:r.min}}},{$group:{_id:{$switch:{branches:[{case:{$lte:["$company.emp_count",50]},then:"Startup"},{case:{$and:[{$gt:["$company.emp_count",50]},{$lte:["$company.emp_count",250]}]},then:"Mid-Size"},{case:{$gt:["$company.emp_count",250]},then:"MNC"}],default:"Unknown"}},count:{$sum:1}}},{$project:{name:"$_id",count:1,_id:0}}]),h=f.reduce((e,t)=>e+t.count,0),D=f.map(e=>({name:e.name,count:e.count,percentage:(0,g.O6)(Math.round(e.count/h*100),0,100)})),S={matchedSkills:c,missingSkills:l,resumeScore:y,totalJobsAnalyzed:o,companyTypeDistribution:D,remoteJobs:s};return{data:S}}catch(e){return{error:"Failed to fetch latest job aggregation data"}}},getUserByIdFromDB=async e=>{try{let t=await a.n5.findById(e);if(!t)return{error:"User does not exists"};return{data:t}}catch(e){return{error:"Error while fetching user"}}},getUserByEmailFromDB=async e=>{try{let t=await a.n5.findOne({email:e});if(!t)return{error:"User does not exists"};return{data:t}}catch(e){return{error:"Failed while fetching user"}}},createUserInDB=async e=>{try{let t=await a.n5.create(e);return{data:t}}catch(e){return{error:"Failed while creating user"}}},getUserByUserNameFromDB=async e=>{try{if(!e)return{error:"Username is required"};let t=await a.n5.findOne({userName:e});if(t)return{error:"Username already taken"};return{data:!0}}catch(e){return{error:"An error occurred while checking the userName"}}},onboardUserToDB=async(e,t,r,n,i,o)=>{try{let s={userName:t,occupation:r,purpose:n,contactNo:i,isOnboarded:!0};if(o){let t=await a.n5.findById(e);t?.from||(s.from=o)}let d=await a.n5.findByIdAndUpdate(e,s,{new:!0});if(!d)return{error:"User does not exist"};return{data:d}}catch(e){return{error:e}}},onboardPrepYatraUserTODB=async(e,t,r,n)=>{try{let i={prepYatra:{workDomain:t,linkedInUrl:r,pyOnboarded:!0}};if(n){let t=await a.n5.findById(e);t?.from||(i.from=n)}let o=await a.n5.findByIdAndUpdate(e,i,{new:!0});if(!o)return{error:"User does not exist"};return{data:o}}catch(e){return{error:e}}},updateUserSkillsInDB=async(e,t)=>{try{let r=await a.n5.findOneAndUpdate({_id:e},{$addToSet:{userSkills:{$each:t}},userSkillsLastUpdated:new Date},{new:!0});if(!r)return{error:"User does not exist"};return{data:r}}catch(e){return{error:"Failed to update user skills"}}},getUserDataByUserNameFromDB=async e=>{try{let t=await a.n5.findOne({userName:e});return{data:t}}catch(e){return{error:"Failed to fetch user from DB"}}},createUserInterestInDB=async e=>{try{let{userId:t,eventType:r,eventDescription:n,metadata:i,source:o,ipAddress:s,userAgent:d}=e,u=await a._H.findOne({userId:t,eventType:r,isActive:!0});if(u)return u.eventDescription=n,u.metadata={...u.metadata,...i},u.source=o,u.ipAddress=s,u.userAgent=d,await u.save(),{data:u};let l=await a._H.create({userId:t,eventType:r,eventDescription:n,metadata:i||{},source:o,ipAddress:s,userAgent:d,isActive:!0});return{data:l}}catch(e){return{error:"Failed to create user interest"}}},getUserInterestsFromDB=async e=>{try{let{page:t=1,limit:r=10,...n}=e,i={};n.userId&&(i.userId=n.userId),n.eventType&&(i.eventType=n.eventType),n.source&&(i.source=n.source),void 0!==n.isActive&&(i.isActive=n.isActive);let o=(t-1)*r,[s,d]=await Promise.all([a._H.find(i).populate("userId","name email image").sort({createdAt:-1}).skip(o).limit(r).lean(),a._H.countDocuments(i)]),u=Math.ceil(d/r);return{data:{interests:s,pagination:{currentPage:t,totalPages:u,totalItems:d,itemsPerPage:r,hasNextPage:t<u,hasPrevPage:t>1}}}}catch(e){return{error:"Failed to get user interests"}}},updateUserInterestInDB=async(e,t)=>{try{let r=await a._H.findByIdAndUpdate(e,{isActive:t},{new:!0}).populate("userId","name email image");if(!r)return{error:"Interest not found"};return{data:r}}catch(e){return{error:"Failed to update user interest"}}},addAWebinarToDB=async e=>{try{let t=new a.Rr(e),r=await t.save();return{data:r}}catch(e){return{error:e}}},getAllWebinarsFromDB=async()=>{try{let e=await a.Rr.find();if(!e)return{error:"No webinars found"};let t=e.map(e=>{let t=(0,g.Si)(e.dateAndTime);return{...e.toObject(),isCompleted:t}});return{data:t}}catch(e){return{error:e}}},updateWebinarInDB=async(e,t)=>{try{let{users:r,...n}=t,i=await a.Rr.findOneAndUpdate({slug:e},{$set:n},{new:!0});if(!i)return{error:"Webinar not found"};r&&r.length>0&&await a.Rr.updateOne({slug:e},{$addToSet:{enrolledUsersList:{$each:r}}});let o=await a.Rr.findOne({slug:e});return{data:o}}catch(e){return{error:e}}},checkUserRegistrationInWebinarDB=async(e,t)=>{try{let r=await a.Rr.findOne({slug:e});if(!r)return{data:!1,error:"Webinar not found"};let n=r.enrolledUsersList.some(e=>e.email===t);return{data:n}}catch(e){return{error:e}}},getWebinarDetailsFromDB=async e=>{try{let t=await a.Rr.findOne({slug:e}).select("-enrolledUsersList");if(!t)return{error:"Webinar not found"};return{data:t}}catch(e){return{error:"Failed to fetch webinar details from the database"}}},getWebinarBySlugFromDB=async e=>{try{let t=await a.Rr.findOne({slug:e});if(!t)return{error:"Webinar not found"};return{data:t}}catch(e){return{error:e}}},deleteAWebinarFromDB=async e=>{try{let t=await a.Rr.findOne({}).where("slug").equals(e);if(!t)return{error:"Webinar not found"};return await t.deleteOne(),{}}catch(e){return{error:e}}},addPlaylistToDB=async e=>{try{let t=new a.gO(e);return await t.save(),{data:t}}catch(e){return{error:"Failed while adding playlist"}}},updateTagsInPlaylist=async(e,t)=>{try{let r=await a.gO.findOneAndUpdate({_id:e},{$set:{tags:t}},{new:!0});return{data:r}}catch(e){return{error:e}}},addUserPlaylistToDB=async(e,t)=>{try{let r=await a.eu.findOne({userId:e,playlistId:t});if(r)return{error:"UserPlaylist already exists"};let n=new a.eu({userId:e,playlistId:t});return await n.save(),{data:n}}catch(e){return{error:e}}},updateReferredByInPlaylist=async(e,t)=>{try{let r=await a.gO.findOneAndUpdate({_id:e},{$inc:{referrerBy:t?1:-1}},{new:!0});if(!r)return{error:"Playlist not found"};return{data:r}}catch(e){return{error:`An error occurred: ${e}`}}},checkPlaylistExistsByID=async e=>{try{let t=await a.gO.findOne({playlistId:e});if(!t)return{error:"Playlist does not exist"};return{data:t}}catch(e){return{error:e}}},getPlaylistsFromDB=async()=>{try{let e=await a.gO.find();return{data:e}}catch(e){return{error:e}}},formatPlaylistResponse=(e,t)=>{if(!e)return null;let r={_id:e._id,playlistId:e.playlistId,playlistName:e.playlistName,description:e.description,referrerBy:e.referrerBy,thumbnail:e.thumbnail,tags:e.tags,videos:e.videos};return t?{...r,userId:t.userId,isRecommended:t.isRecommended,learningTime:t.learningTime}:r},getPlaylistByIdFromDB=async(e,t)=>{try{let r;if(t){let n=await a.eu.findOne({playlistId:e,userId:t}).populate("playlistId").lean().exec();n||(await addUserPlaylistToDB(t,e),n=await a.eu.findOne({playlistId:e,userId:t}).populate("playlistId").lean().exec()),r=formatPlaylistResponse(n?.playlistId,n)}else{let t=await a.gO.findById(e).lean();if(!t)return{error:"Playlist not found"};r=formatPlaylistResponse(t)}return{data:r}}catch(e){return{error:e}}},getUserPlaylistsFromDB=async e=>{try{let t=await a.eu.find({userId:e}).populate("playlistId").lean().exec().then(e=>e.filter(e=>e.playlistId));if(!t.length)return{error:"User does not have any playlists"};let r=t.map(e=>formatPlaylistResponse(e.playlistId,e));return{data:r}}catch(e){return{error:"An error occurred while fetching playlists"}}},deleteUserPlaylistFromDB=async(e,t)=>{try{let r=await a.eu.findOneAndDelete({userId:e,playlistId:t});if(!r)return{error:"UserPlaylist not found"};return{data:r}}catch(e){return{error:"An error occurred while deleting userPlaylist"}}},updateUserPlaylistData=async(e,t,r,n)=>{try{let i=await a.eu.findOne({userId:e,playlistId:t});if(!i)return{error:"UserPlaylist not found"};let o={};if(void 0!==r&&(o.isRecommended=r),void 0!==n&&(o.learningTime=n),0===Object.keys(o).length)return{error:"No fields provided for update"};let s=await a.eu.findOneAndUpdate({userId:e,playlistId:t},{$set:o},{new:!0});if(!s)return{error:"Failed to update UserPlaylist"};let d=null;return void 0!==r&&i.isRecommended!==r&&(d=await updateReferredByInPlaylist(t,r)),{data:{updatedUserPlaylist:s,updatedPlaylist:d}}}catch(e){return{error:`An error occurred: ${e}`}}},getPlaylistByTagFromDB=async e=>{try{let t=await a.gO.find({tags:{$in:[e]}});if(!t||0===t.length)return{error:"No playlists found for the given skill."};return{data:t}}catch(e){return{error:e}}},deletePlaylistFromDB=async e=>{try{let t=await a.gO.findOneAndDelete({_id:e});if(!t)return{error:"Playlist does not exist"};return{data:t}}catch(e){return{error:e}}},deletePlaylistByTagFromDB=async e=>{try{let t=await a.gO.deleteMany({tags:e});if(!t)return{error:"No playlists found for the given skill."};return{data:t}}catch(e){return{error:e}}},createQuizSessionInDB=async({userId:e,quizId:t,difficulty:r,questionCount:n})=>{try{let o=await a.x8.findById(t).lean();if(!o||!o.isActive)return{error:"Quiz not found or inactive"};let s=await a.FP.find({userId:e}).lean(),d=await selectQuestionsIntelligently({quiz:o,difficulty:r,questionCount:n,userPerformance:s});if(0===d.length)return{error:"No questions available for the selected difficulty"};let u={userId:new i.Schema.Types.ObjectId(e),quizId:new i.Schema.Types.ObjectId(t),categoryName:o.categoryName,difficulty:r,questionCount:d.length,questions:d,status:"in_progress",startedAt:new Date},l=new a.PQ(u);return await l.save(),{data:l}}catch(e){return console.error("Error creating quiz session:",e),{error:"Failed to create quiz session"}}},selectQuestionsIntelligently=async({quiz:e,difficulty:t,questionCount:r,userPerformance:a})=>{let n=e.questions||[];"mixed"!==t&&(n=n.filter(e=>e.difficulty===t));let o=new Map(a.map(e=>[e.questionId.toString(),e])),s=n.map(e=>{let t=1,r=e._id||Math.random().toString(),a=o.get(r);if(a){a.nextReviewDate<=new Date&&(t*=2);let e=Math.floor((Date.now()-a.lastAttemptedAt.getTime())/864e5);e<7&&(t*=.5),a.strengthLevel<.6&&(t*=1.5)}else t*=1.2;return{question:e,weight:t}});s.sort((e,t)=>t.weight-e.weight);let d=s.slice(0,r).map(({question:e},t)=>({questionId:new i.Schema.Types.ObjectId(e._id||Math.random().toString()),question:e.question,options:e.options,correctAnswer:e.correctAnswer,difficulty:e.difficulty,explanation:e.explanation,detailedExplanation:e.detailedExplanation}));return d},submitAnswerInDB=async({sessionId:e,questionIndex:t,answer:r,timeSpent:n})=>{try{let i=await a.PQ.findById(e);if(!i||"in_progress"!==i.status)return{error:"Session not found or not active"};let o=i.questions[t];if(!o)return{error:"Question not found"};let s=r===o.correctAnswer;return i.questions[t]={...o,userAnswer:r,isCorrect:s,timeSpent:n,answeredAt:new Date},await i.save(),await updateUserQuestionPerformance({userId:i.userId.toString(),questionId:o.questionId.toString(),categoryName:i.categoryName,difficulty:o.difficulty,isCorrect:s,timeSpent:n}),{data:{isCorrect:s,explanation:o.explanation,detailedExplanation:o.detailedExplanation}}}catch(e){return console.error("Error submitting answer:",e),{error:"Failed to submit answer"}}},completeQuizSessionInDB=async e=>{try{let t=await a.PQ.findById(e);if(!t)return{error:"Session not found"};let r=t.questions.filter(e=>void 0!==e.userAnswer),n=r.filter(e=>e.isCorrect).length,i=r.reduce((e,t)=>e+(t.timeSpent||0),0),o=Math.round(n/r.length*100);t.status="completed",t.completedAt=new Date,t.totalTime=i,t.score=o,t.percentage=o,await t.save();let s={userId:t.userId,quizId:t.quizId,categoryName:t.categoryName,answers:t.questions.map((e,t)=>({questionIndex:t,selectedAnswer:e.userAnswer||-1,isCorrect:e.isCorrect||!1,timeSpent:e.timeSpent||0})),score:o,correctAnswers:n,totalQuestions:r.length,timeTaken:i,pointsEarned:10*n,completedAt:new Date};return await a.bE.create(s),await updateUserAnalyticsInDB({userId:t.userId.toString(),categoryName:t.categoryName,score:o,difficulty:t.difficulty,timeSpent:i}),{data:t}}catch(e){return console.error("Error completing session:",e),{error:"Failed to complete session"}}},updateUserQuestionPerformance=async({userId:e,questionId:t,categoryName:r,difficulty:n,isCorrect:i,timeSpent:o})=>{try{let s=await a.FP.findOne({userId:e,questionId:t});s||(s=new a.FP({userId:e,questionId:t,categoryName:r,difficulty:n,attempts:0,correctAttempts:0,averageTime:0,lastAttemptedAt:new Date,strengthLevel:0,nextReviewDate:new Date,easeFactor:2.5,interval:1})),s.attempts++,i&&s.correctAttempts++,s.averageTime=(s.averageTime*(s.attempts-1)+o)/s.attempts,s.strengthLevel=s.correctAttempts/s.attempts,updateSpacedRepetition(s,i,o),s.lastAttemptedAt=new Date,await s.save()}catch(e){console.error("Error updating question performance:",e)}},updateSpacedRepetition=(e,t,r)=>{if(t){1===e.interval?e.interval=6:e.interval=Math.round(e.interval*e.easeFactor);let t=r<10?5:r<20?4:r<30?3:2;e.easeFactor=Math.max(1.3,e.easeFactor+(.1-(5-t)*(.08+(5-t)*.02)))}else e.interval=1,e.easeFactor=Math.max(1.3,e.easeFactor-.2);e.nextReviewDate=new Date(Date.now()+864e5*e.interval)},updateUserAnalyticsInDB=async({userId:e,categoryName:t,score:r,difficulty:n,timeSpent:i})=>{try{let o=await a.nL.findOne({userId:e,categoryName:t});if(o||(o=new a.nL({userId:e,categoryName:t,totalAttempts:0,bestScore:0,averageScore:0,totalTimeSpent:0,strengthAreas:[],improvementAreas:[],difficultyPerformance:{easy:{attempts:0,successRate:0},medium:{attempts:0,successRate:0},hard:{attempts:0,successRate:0}},progressTimeline:[],lastAttemptAt:new Date})),o.totalAttempts++,o.bestScore=Math.max(o.bestScore,r),o.averageScore=(o.averageScore*(o.totalAttempts-1)+r)/o.totalAttempts,o.totalTimeSpent+=i,"mixed"!==n&&["easy","medium","hard"].includes(n)){o.difficultyPerformance[n].attempts++;let e=r>=70?1:0;o.difficultyPerformance[n].successRate=(o.difficultyPerformance[n].successRate*(o.difficultyPerformance[n].attempts-1)+e)/o.difficultyPerformance[n].attempts}o.progressTimeline.push({date:new Date,score:r,difficulty:n,timeSpent:i}),o.progressTimeline.length>30&&(o.progressTimeline=o.progressTimeline.slice(-30)),o.lastAttemptAt=new Date,await o.save()}catch(e){console.error("Error updating analytics:",e)}},getUserAnalyticsFromDB=async(e,t)=>{try{let r={userId:e};t&&(r.categoryName=t);let n=await a.nL.find(r).lean();return{data:n}}catch(e){return{error:"Failed to fetch user analytics"}}},getQuizLeaderboardFromDB=async(e,t=50)=>{try{let r={};e&&(r.categoryName=e);let n=await a.nL.aggregate([{$match:r},{$lookup:{from:"users",localField:"userId",foreignField:"_id",as:"user"}},{$unwind:"$user"},{$project:{userId:1,userName:"$user.name",userImage:"$user.image",categoryName:1,totalScore:"$bestScore",totalAttempts:1,averageScore:1,bestStreak:{$literal:0}}},{$sort:{totalScore:-1,averageScore:-1}},{$limit:t},{$addFields:{rank:{$add:[{$indexOfArray:[[],null]},1]},badgeLevel:{$switch:{branches:[{case:{$gte:["$totalScore",90]},then:"platinum"},{case:{$gte:["$totalScore",80]},then:"gold"},{case:{$gte:["$totalScore",70]},then:"silver"}],default:"bronze"}}}}]);return{data:n}}catch(e){return{error:"Failed to fetch leaderboard"}}},getUserQuizSessionsFromDB=async(e,t)=>{try{let r={userId:e};t&&(r.status=t);let n=await a.PQ.find(r).sort({startedAt:-1}).lean();return{data:n}}catch(e){return{error:"Failed to fetch user sessions"}}},getQuizAdminAnalyticsFromDB=async()=>{try{let e=await a.PQ.countDocuments(),t=await a.PQ.aggregate([{$match:{status:"completed"}},{$group:{_id:null,total:{$sum:"$questionCount"}}}]),r=await a.PQ.aggregate([{$match:{status:"completed"}},{$group:{_id:null,avgTime:{$avg:"$totalTimeSpent"}}}]),n=await a.nL.aggregate([{$group:{_id:"$categoryName",attempts:{$sum:"$totalAttempts"},avgScore:{$avg:"$averageScore"}}},{$sort:{attempts:-1}},{$limit:5}]),i=await a.PQ.aggregate([{$group:{_id:"$difficulty",count:{$sum:1}}}]),o=await a.PQ.aggregate([{$group:{_id:{$dateToString:{format:"%Y-%m-%d",date:"$startedAt"}},sessions:{$sum:1}}},{$sort:{_id:-1}},{$limit:7}]),s={totalQuizSessions:e,totalQuestionsAnswered:t[0]?.total||0,averageSessionTime:Math.round(r[0]?.avgTime||0),topPerformingCategories:n.map(e=>({categoryName:e._id,attempts:e.attempts,averageScore:Math.round(10*e.avgScore)/10})),difficultyDistribution:i.reduce((e,t)=>(e[t._id]=t.count,e),{}),userEngagement:{dailyActiveSessions:o[0]?.sessions||0,weeklyActiveUsers:await a.PQ.distinct("userId",{startedAt:{$gte:new Date(Date.now()-6048e5)}}).then(e=>e.length),averageSessionsPerUser:e>0?Math.round(e/await a.PQ.distinct("userId").then(e=>e.length)*10)/10:0}};return{data:s}}catch(e){return console.error("Error fetching admin analytics:",e),{error:"Failed to fetch admin analytics"}}},getActiveSessionsFromDB=async()=>{try{let e=await a.PQ.find({status:{$in:["in_progress","paused"]},startedAt:{$gte:new Date(Date.now()-864e5)}}).populate("userId","name email").sort({startedAt:-1}).lean(),t=e.map(e=>{let t=e.questions.filter(e=>void 0!==e.userAnswer).length;return{sessionId:e._id.toString(),userId:e.userId.toString(),userName:e.userId.name||"Unknown User",categoryName:e.categoryName,difficulty:e.difficulty,status:e.status,progress:{answered:t,total:e.questionCount,percentage:t>0?Math.round(t/e.questionCount*100):0},startedAt:e.startedAt.toISOString(),score:"completed"===e.status?e.score:void 0}});return{data:t}}catch(e){return console.error("Error fetching active sessions:",e),{error:"Failed to fetch active sessions"}}},addUserQuizAttemptToDB=async e=>{try{let t=new a.bE({userId:e.userId,quizId:e.quizId,score:e.score,totalQuestions:e.totalQuestions,correctAnswers:e.correctAnswers,timeTaken:e.totalTimeSpent,answers:e.answers,categoryName:e.categoryName,pointsEarned:Math.round(e.correctAnswers/e.totalQuestions*100),completedAt:new Date(e.completedAt)}),r=await t.save();return{data:r}}catch(t){return console.error("Error saving quiz attempt:",t),console.error("Attempt data that failed:",JSON.stringify(e,null,2)),t instanceof Error&&(console.error("Error details:",t.message),console.error("Error stack:",t.stack)),{error:"Failed to save quiz attempt"}}},getUserQuizPerformanceFromDB=async e=>{try{let t=await a.bE.find({}).lean(),r=t.filter(t=>t.userId.toString()===e);if(0===r.length)return{data:{totalAttempts:0,totalQuizzes:0,averageScore:0,bestScore:0,totalTimeSpent:0,categoryBreakdown:[],recentAttempts:[]}};let n=r.length,i=new Set(r.map(e=>e.quizId.toString())).size,o=Math.round(r.reduce((e,t)=>e+t.score,0)/n),s=Math.max(...r.map(e=>e.score)),d=r.reduce((e,t)=>e+(t.timeTaken||0),0),u=new Map;r.forEach(e=>{let t=e.categoryName;u.has(t)||u.set(t,{scores:[],attempts:0});let r=u.get(t);r.scores.push(e.score),r.attempts++});let l=Array.from(u.entries()).map(([e,t])=>({categoryName:e,attempts:t.attempts,averageScore:Math.round(t.scores.reduce((e,t)=>e+t,0)/t.scores.length),bestScore:Math.max(...t.scores)})),c=r.slice(0,10).map(e=>({_id:e._id.toString(),quizId:e.quizId.toString(),categoryName:e.categoryName,score:e.score,completedAt:e.completedAt?.toISOString()||new Date().toISOString(),totalTimeSpent:e.timeTaken||0}));return{data:{totalAttempts:n,totalQuizzes:i,averageScore:o,bestScore:s,totalTimeSpent:d,categoryBreakdown:l,recentAttempts:c}}}catch(e){return console.error("Error getting user performance:",e),{data:{totalAttempts:0,totalQuizzes:0,averageScore:0,bestScore:0,totalTimeSpent:0,categoryBreakdown:[],recentAttempts:[]}}}},getLeaderboardFromDB=async(e=10)=>{try{let t=await a.bE.aggregate([{$lookup:{from:"users",localField:"userId",foreignField:"_id",as:"user"}},{$unwind:"$user"},{$group:{_id:"$userId",username:{$first:"$user.name"},image:{$first:"$user.image"},bestScore:{$max:"$score"},totalAttempts:{$sum:1},averageScore:{$avg:"$score"},totalTimeSpent:{$sum:"$timeTaken"}}},{$sort:{bestScore:-1}},{$limit:e}]);return{data:t}}catch(e){return console.error("Error getting leaderboard:",e),{error:"Failed to get leaderboard"}}},userQuizAttempt_getQuizAdminAnalyticsFromDB=async()=>{try{let[e,t,r,n]=await Promise.all([a.bE.countDocuments(),a.bE.distinct("userId").then(e=>e.length),a.bE.distinct("categoryName").then(e=>e.length),a.bE.aggregate([{$group:{_id:null,avgTime:{$avg:"$timeTaken"}}}]).then(e=>e[0]?.avgTime||0)]),i=await a.bE.aggregate([{$group:{_id:"$categoryName",totalAttempts:{$sum:1},averageScore:{$avg:"$score"},uniqueUsers:{$addToSet:"$userId"}}},{$addFields:{uniqueUserCount:{$size:"$uniqueUsers"}}},{$project:{categoryName:"$_id",totalAttempts:1,averageScore:{$round:["$averageScore",1]},uniqueUsers:"$uniqueUserCount"}},{$sort:{totalAttempts:-1}}]),o=new Date;o.setDate(o.getDate()-7);let s=await a.bE.aggregate([{$match:{completedAt:{$gte:o}}},{$group:{_id:{$dateToString:{format:"%Y-%m-%d",date:"$completedAt"}},count:{$sum:1},avgScore:{$avg:"$score"}}},{$sort:{_id:1}}]);return{data:{overview:{totalAttempts:e,uniqueUsers:t,totalCategories:r,avgTimePerQuiz:Math.round(n)},categoryStats:i,recentActivity:s}}}catch(e){return console.error("Error getting admin analytics:",e),{error:"Failed to get admin analytics"}}}},2215:(e,t,r)=>{r.d(t,{Z:()=>s});var a=r(1185),n=r(5912);let i=new a.Schema({type:{type:String,enum:n.R0,required:!0},userId:{type:String,required:!0},userName:{type:String,required:!0},programName:{type:String,required:!0},programId:{type:a.Schema.Types.ObjectId,required:!0},date:{type:String,required:!0}},{timestamps:!0,_id:!0,toObject:{virtuals:!0,transform:(e,t)=>(delete t.id,t)},toJSON:{virtuals:!0,transform:(e,t)=>(delete t.id,t)}}),o=a.models?.Certificate||(0,a.model)(n.Ml.CERTIFICATE,i),s=o},5976:(e,t,r)=>{r.d(t,{Z:()=>s});var a=r(1185),n=r(5912);let i=new a.Schema({code:{type:String,required:[!0,"Coupon code is required"],unique:!0,uppercase:!0,trim:!0,maxlength:[20,"Coupon code cannot exceed 20 characters"]},discountPercentage:{type:Number,required:[!0,"Discount percentage is required"],min:[1,"Discount must be at least 1%"],max:[100,"Discount cannot exceed 100%"]},description:{type:String,required:[!0,"Coupon description is required"],maxlength:[200,"Description cannot exceed 200 characters"]},isActive:{type:Boolean,default:!0},expiryDate:{type:Date,required:[!0,"Expiry date is required"]},maxUsage:{type:Number,default:null,min:[1,"Max usage must be at least 1 if specified"]},currentUsage:{type:Number,default:0,min:[0,"Current usage cannot be negative"]},applicableProducts:{type:[String],default:[]},minimumAmount:{type:Number,default:0,min:[0,"Minimum amount cannot be negative"]},createdBy:{type:a.Schema.Types.ObjectId,ref:n.Ml.USER,required:[!0,"Created by user is required"]}},{timestamps:!0,_id:!0,toObject:{virtuals:!0,transform:(e,t)=>(delete t.id,t)},toJSON:{virtuals:!0,transform:(e,t)=>(delete t.id,t)}});i.virtual("isExpired").get(function(){return new Date>this.expiryDate}),i.virtual("isUsageLimitReached").get(function(){return null!=this.maxUsage&&this.maxUsage>0&&this.currentUsage>=this.maxUsage}),i.virtual("isValid").get(function(){return this.isActive&&!this.isExpired&&!this.isUsageLimitReached}),i.index({code:1}),i.index({isActive:1,expiryDate:1});let o=a.models?.Coupon||(0,a.model)(n.Ml.COUPON,i),s=o},7074:(e,t,r)=>{r.d(t,{KB:()=>a.Z,tv:()=>ea,zN:()=>eo,wV:()=>n.Z,T0:()=>e0,FQ:()=>M,z6:()=>J,x2:()=>u,xp:()=>m,Iv:()=>G,oI:()=>te,tH:()=>e7,s3:()=>h,wu:()=>eu,P_:()=>B,F6:()=>F,gO:()=>tn,Kx:()=>ep,J4:()=>eD,IK:()=>eA,x8:()=>eE,bE:()=>ej,PQ:()=>ek,BL:()=>eg,n5:()=>v,HU:()=>e6,_H:()=>T,eu:()=>ts,cK:()=>eP,FP:()=>ez,nL:()=>eG,b0:()=>ee,Rr:()=>E});var a=r(2215),n=r(5976),i=r(1185),o=r(5912);let s=new i.Schema({rating:{type:Number,required:[!0,"Rating is required"],min:[1,"Minimum rating is 1"],max:[5,"Maximum rating is 5"]},feedback:{type:String},type:{type:String,required:[!0,"Feedback type is required"],enum:o.Eo,default:"GENERAL"},ref:{type:i.Schema.Types.ObjectId,refPath:"type"},user:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User reference is required"]}},{timestamps:!0}),d=i.models?.Feedback||(0,i.model)(o.Ml.FEEDBACK,s),u=d,l=new i.Schema({actionType:{type:String,enum:o.Ts,required:!0},pointsEarned:{type:Number,required:!0}},{timestamps:!0}),c=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:!0},points:{type:Number,default:0},actions:[l]},{timestamps:!0}),p=i.models[o.Ml.GAMIFICATION]||(0,i.model)(o.Ml.GAMIFICATION,c),m=p,y=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:!0},points:{type:Number,required:!0}},{_id:!1}),g=new i.Schema({type:{type:String,enum:o.i$,required:!0},date:{type:Date,required:!0},entries:{type:[y],default:[]}},{timestamps:!0}),f=i.models[o.Ml.LEADERBOARD]||(0,i.model)(o.Ml.LEADERBOARD,g),h=f,D=new i.Schema({type:{type:String,enum:o.tx,required:[!0,"Type is required"]},text:{type:String,required:!0},isHTML:{type:Boolean,default:!1},link:{type:String},isExternalLink:{type:Boolean,default:!1}},{timestamps:!0}),S=i.models?.Notification||(0,i.model)(o.Ml.NOTIFICATION,D),B=S,I=new i.Schema({user:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User ref is required"]},productId:{type:String,required:[!0,"Product ID is required"]},productType:{type:String,enum:o.fY,required:[!0,"Product type is required"]},amount:{type:Number,required:!0},orderId:{type:String,required:!0,unique:!0},paymentId:{type:String},paymentLink:{type:String,required:!0},isPaid:{type:Boolean,default:!1},appliedCoupon:{type:i.Schema.Types.ObjectId,ref:o.Ml.COUPON,default:null},couponCode:{type:String,default:null}},{timestamps:!0}),w=i.models?.Payment||(0,i.model)(o.Ml.PAYMENT,I),F=w,A=new i.Schema({pyOnboarded:{type:Boolean,default:!1},experienceLevel:{type:String},workDomain:{type:String,enum:o.QB},goal:{type:String,enum:o.IQ,required:[!0,"Goal is required"]},targetCompanies:{type:[String],enum:o.w6,default:[]},preferences:{interviewCategories:{type:[String],enum:o.Tw,default:[]},focusAreas:{type:[String],default:[]}},prepLog:{currentStreak:{type:Number,default:0},longestStreak:{type:Number,default:0},lastLoggedDate:{type:Date},totalLogs:{type:Number,default:0}}}),b=new i.Schema({name:{type:String,required:[!0,"name is required"]},userName:{type:String},email:{type:String,required:[!0,"email is required"],unique:!0},image:{type:String},provider:{type:String},providerAccountId:{type:String},isOnboarded:{type:Boolean,default:!1},occupation:{type:String,enum:o.N1},purpose:{type:[String],enum:o.Lu},contactNo:{type:String},linkedInUrl:{type:String},githubUrl:{type:String},leetCodeUrl:{type:String},userSkills:{type:[String],default:[]},userSkillsLastUpdated:{type:Date,default:null},from:{type:String,enum:["webapp","prepyatra","quiz","direct"],default:"direct"},prepYatra:A},{timestamps:!0}),q=i.models?.User||(0,i.model)(o.Ml.USER,b),v=q,U=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User ID is required"],index:!0},eventType:{type:String,enum:o.dc,required:[!0,"Event type is required"],index:!0},eventDescription:{type:String,trim:!0,maxlength:[500,"Event description cannot exceed 500 characters"]},metadata:{type:i.Schema.Types.Mixed,default:{}},isActive:{type:Boolean,default:!0,index:!0},source:{type:String,enum:["WEBAPP","PREPYATRA","ADMIN","API"],required:[!0,"Source is required"],index:!0},ipAddress:{type:String,trim:!0},userAgent:{type:String,trim:!0}},{timestamps:!0,_id:!0,toObject:{virtuals:!0,transform:(e,t)=>(delete t.id,t)},toJSON:{virtuals:!0,transform:(e,t)=>(delete t.id,t)}});U.index({userId:1,eventType:1}),U.index({eventType:1,source:1}),U.index({createdAt:-1}),U.index({userId:1,isActive:1}),U.index({userId:1,eventType:1},{unique:!0,partialFilterExpression:{isActive:!0}});let P=i.models?.UserInterest||(0,i.model)(o.Ml.USER_INTEREST,U),T=P,C=new i.Schema({slug:{type:String,required:[!0,"Webinar slug is required"],unique:!0},name:{type:String,required:[!0,"Webinar name is required"]},description:{type:String,required:[!0,"Webinar description is required"]},isFree:{type:Boolean,required:[!0,"Webinar free status is required"]},about:{type:[String],required:[!0,"Webinar about information is required"]},learnings:{type:[String],required:[!0,"Webinar learnings are required"]},host:{name:{type:String,required:[!0,"Host name is required"]},imageUrl:{type:String,required:[!0,"Host image URL is required"]},role:{type:String,required:[!0,"Host role is required"]},about:{type:[String],required:[!0,"Host about information is required"]},linkedInUrl:{type:String,required:[!0,"Host LinkedIn URL is required"]}},registrationUrl:{type:String,required:[!0,"Registration URL is required"]},dateAndTime:{type:String,required:[!0,"Date and Time are required"]},enrolledUsersList:[{name:{type:String,required:[!0,"User name is required"]},email:{type:String,required:[!0,"User email is required"]}}],whatYoullLearn:{type:[String],required:[!0,"What you will learn is required"]},recordedVideoUrl:{type:String},coverImageURL:{type:String,required:[!0,"Cover image URL is required"]}},{timestamps:!0,toObject:{virtuals:!0,transform:(e,t)=>(delete t.id,t.enrolledUsersList&&t.enrolledUsersList.forEach(e=>{delete e._id}),t)},toJSON:{virtuals:!0,transform:(e,t)=>(delete t.id,t.enrolledUsersList&&t.enrolledUsersList.forEach(e=>{delete e._id}),t)}}),O=i.models?.Webinar||(0,i.model)(o.Ml.WEBINAR,C),E=O,$={APPLIED:"applied",UNDER_REVIEW:"under_review",INTERVIEW_SCHEDULED:"interview_scheduled",INTERVIEW_COMPLETED:"interview_completed",APPROVED:"approved",REJECTED:"rejected",OFFER_SENT:"offer_sent",OFFER_ACCEPTED:"offer_accepted",ONBOARDED:"onboarded"},x=new i.Schema({techStack:{type:[String],enum:["JavaScript","TypeScript","Python","Java","React","Next.js","Node.js","Express","MongoDB","PostgreSQL","MySQL","AWS","Docker","Kubernetes","DevOps","AI/ML","Blockchain","Mobile Development","UI/UX","Data Science"],required:[!0,"Tech stack is required"]},experienceLevel:{type:String,enum:["Beginner","Intermediate","Advanced","Expert"],required:[!0,"Experience level is required"]},learningFocus:{type:[String],enum:["Frontend Development","Backend Development","Full Stack Development","DevOps","Data Science","AI/ML","Mobile Development","Blockchain","UI/UX Design","Product Management","Technical Writing","Community Building"],required:[!0,"Learning focus is required"]},availability:{type:String,enum:["5-10 hours/week","10-15 hours/week","15-20 hours/week","20+ hours/week"],required:[!0,"Availability is required"]},currentRole:String,company:String,linkedinProfile:String,githubProfile:String,portfolioUrl:String,motivation:{type:String,required:[!0,"Motivation is required"],maxlength:[1e3,"Motivation cannot exceed 1000 characters"]},previousExperience:{type:String,maxlength:[1e3,"Previous experience cannot exceed 1000 characters"]},whyTBE:{type:String,required:[!0,"Why TBE is required"],maxlength:[1e3,"Why TBE cannot exceed 1000 characters"]}},{_id:!1}),N=new i.Schema({weeklyLearning:{type:Boolean,required:[!0,"Weekly learning commitment is required"]},communityParticipation:{type:Boolean,required:[!0,"Community participation commitment is required"]},eventAttendance:{type:Boolean,required:[!0,"Event attendance commitment is required"]},contentCreation:{type:Boolean,required:[!0,"Content creation commitment is required"]},socialMediaEngagement:{type:Boolean,required:[!0,"Social media engagement commitment is required"]}},{_id:!1}),j=new i.Schema({devrelKnowledgeScore:{type:Number,min:0,max:100,required:!0},skillAssessmentScore:{type:Number,min:0,max:100,required:!0},totalScore:{type:Number,min:0,max:100,required:!0},completedAt:{type:Date,default:Date.now}},{_id:!1}),L=new i.Schema({scheduledAt:Date,interviewerEmail:String,meetingLink:String,feedback:{type:String,maxlength:[2e3,"Feedback cannot exceed 2000 characters"]},rating:{type:Number,min:1,max:10},completedAt:Date},{_id:!1}),_=new i.Schema({isStarted:{type:Boolean,default:!1},completedTasks:[{type:i.Schema.Types.ObjectId,ref:"DevRelTask"}],completionPercentage:{type:Number,min:0,max:100,default:0},startedAt:Date,completedAt:Date},{_id:!1}),R=new i.Schema({tasksCompleted:{type:Number,default:0},tasksAssigned:{type:Number,default:0},averageCompletionTime:{type:Number,default:0},streakCount:{type:Number,default:0},lastActivityAt:Date},{_id:!1}),k=new i.Schema({name:{type:String,required:[!0,"Name is required"],trim:!0},email:{type:String,required:[!0,"Email is required"],unique:!0,lowercase:!0,trim:!0},role:{type:String,default:"lead",immutable:!0},status:{type:String,enum:Object.values($),default:$.APPLIED},profileImage:String,applicationData:{type:x,required:[!0,"Application data is required"]},commitments:{type:N,required:[!0,"Commitments are required"]},assessmentResults:j,interviewData:L,onboardingProgress:{type:_,default:()=>({})},performanceMetrics:{type:R,default:()=>({})},reviewedBy:{type:i.Schema.Types.ObjectId,ref:"User"},approvedBy:{type:i.Schema.Types.ObjectId,ref:"User"},rejectedAt:Date,rejectionReason:String,offerSentAt:Date,offerAcceptedAt:Date,onboardedAt:Date},{timestamps:!0,toJSON:{virtuals:!0,transform:function(e,t){return delete t.__v,t}}});k.index({email:1}),k.index({status:1}),k.index({createdAt:-1}),k.virtual("isOnboarded").get(function(){return this.status===$.ONBOARDED}),k.virtual("canAccessDashboard").get(function(){let e=[$.APPROVED,$.OFFER_SENT,$.OFFER_ACCEPTED,$.ONBOARDED];return e.includes(this.status)}),k.methods.updateStatus=function(e,t){return this.status=e,e===$.APPROVED&&t&&(this.approvedBy=t),e===$.REJECTED&&(this.rejectedAt=new Date),e===$.OFFER_SENT&&(this.offerSentAt=new Date),e===$.OFFER_ACCEPTED&&(this.offerAcceptedAt=new Date),e===$.ONBOARDED&&(this.onboardedAt=new Date,this.onboardingProgress.isStarted=!0,this.onboardingProgress.startedAt=new Date),this.save()},k.statics.findByEmail=function(e){return this.findOne({email:e.toLowerCase()})},k.statics.findByStatus=function(e){return this.find({status:e})};let M=i.models?.DevRelLead||(0,i.model)("DevRelLead",k),Q={PENDING:"pending",IN_PROGRESS:"in_progress",COMPLETED:"completed",OVERDUE:"overdue"},z=new i.Schema({title:{type:String,required:[!0,"Resource title is required"]},url:{type:String,required:[!0,"Resource URL is required"]},type:{type:String,enum:["link","document","video"],required:[!0,"Resource type is required"]}},{_id:!1}),W=new i.Schema({title:{type:String,required:[!0,"Task title is required"],trim:!0},description:{type:String,required:[!0,"Task description is required"],trim:!0},type:{type:String,enum:Object.values({ONBOARDING:"onboarding",WEEKLY:"weekly",SPECIAL:"special",TRAINING:"training"}),required:[!0,"Task type is required"]},priority:{type:String,enum:["low","medium","high"],default:"medium"},assignedTo:[{type:i.Schema.Types.ObjectId,ref:"DevRelLead"}],assignedToAll:{type:Boolean,default:!1},createdBy:{type:i.Schema.Types.ObjectId,ref:"User",required:[!0,"Task creator is required"]},dueDate:Date,estimatedHours:{type:Number,min:0},status:{type:String,enum:Object.values(Q),default:Q.PENDING},completionTracking:{type:Map,of:{status:{type:String,enum:Object.values(Q),default:Q.PENDING},startedAt:Date,completedAt:Date,notes:String,submissionUrl:String,reviewStatus:{type:String,enum:["pending","approved","needs_revision"]},reviewNotes:String,reviewedBy:{type:i.Schema.Types.ObjectId,ref:"User"},reviewedAt:Date},default:()=>new Map},requirements:[String],resources:[z],submissionRequired:{type:Boolean,default:!1},submissionType:{type:String,enum:["url","text","file"]},submissionInstructions:String,tags:[String],isActive:{type:Boolean,default:!0}},{timestamps:!0,toJSON:{virtuals:!0,transform:function(e,t){return delete t.__v,t.completionTracking instanceof Map&&(t.completionTracking=Object.fromEntries(t.completionTracking)),t}}});W.index({type:1}),W.index({status:1}),W.index({createdBy:1}),W.index({assignedTo:1}),W.index({dueDate:1}),W.index({isActive:1}),W.virtual("isOverdue").get(function(){return this.dueDate&&new Date>this.dueDate&&this.status!==Q.COMPLETED}),W.methods.assignToLead=function(e){return this.assignedTo.includes(e)||(this.assignedTo.push(e),this.completionTracking.set(e,{status:Q.PENDING})),this.save()},W.methods.updateLeadProgress=function(e,t,r={}){let a=this.completionTracking.get(e)||{};return a.status=t,t!==Q.IN_PROGRESS||a.startedAt||(a.startedAt=new Date),t===Q.COMPLETED&&(a.completedAt=new Date),Object.assign(a,r),this.completionTracking.set(e,a),this.save()},W.methods.getLeadStatus=function(e){return this.completionTracking.get(e)||{status:Q.PENDING}},W.statics.findByType=function(e){return this.find({type:e,isActive:!0}).sort({createdAt:-1})},W.statics.findForLead=function(e){return this.find({$or:[{assignedTo:e},{assignedToAll:!0}],isActive:!0}).sort({dueDate:1,createdAt:-1})};let J=i.models?.DevRelTask||(0,i.model)("DevRelTask",W),Y=new i.Schema({title:{type:String,required:[!0,"Question Title is required"]},question:{type:String,required:[!0,"Question Name is required"]},answer:{type:String,required:[!0,"Question answer is required"]},frequency:{type:String,enum:o.p1,required:!0},companyTypes:{type:[String],enum:o.w6,default:[]},priority:{type:String,enum:o.tQ,default:"Medium",required:!0}},{timestamps:!0,_id:!0}),H=new i.Schema({name:{type:String,required:[!0,"InterviewSheet name is required"]},meta:{type:String},slug:{type:String,required:[!0,"Slug is required"]},coverImageURL:{type:String,required:[!0,"Sheet thumbnail is required"]},description:{type:String,required:[!0,"Description is required"]},liveOn:{type:Date,required:[!0,"Live on is required"]},isPremium:{type:Boolean,default:!1},price:{type:Number},discountPercentage:{type:Number,min:[0,"Discount percentage cannot be negative"],max:[100,"Discount percentage cannot exceed 100%"],default:0},appliedCoupon:{type:i.Schema.Types.ObjectId,ref:"Coupon",default:null},questions:[Y],roadmap:{type:String,enum:o.bu,required:[!0,"Roadmap on is required"]},features:[{type:String}]},{timestamps:!0,_id:!0,toObject:{virtuals:!0,transform:(e,t)=>(delete t.id,t)},toJSON:{virtuals:!0,transform:(e,t)=>(delete t.id,t)}}),K=i.models?.InterviewSheet||(0,i.model)(o.Ml.INTERVIEW_SHEET,H),G=K,Z=new i.Schema({questionId:{type:i.Schema.Types.ObjectId,required:[!0,"Question ID is required"]},isStarred:{type:Boolean,default:!1},isCompleted:{type:Boolean,default:!1}},{timestamps:!0,_id:!0}),V=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User ID is required"],index:!0},sheetId:{type:i.Schema.Types.ObjectId,ref:o.Ml.INTERVIEW_SHEET,required:[!0,"Sheet ID is required"],index:!0},questions:[Z]},{timestamps:!0,_id:!0,toObject:{virtuals:!0,transform:(e,t)=>(delete t.id,t)},toJSON:{virtuals:!0,transform:(e,t)=>(delete t.id,t)}});V.virtual("sheet",{ref:o.Ml.INTERVIEW_SHEET,localField:"sheetId",foreignField:"_id",justOne:!0});let X=i.models?.UserSheet||(0,i.model)(o.Ml.USER_SHEET,V),ee=X,et=new i.Schema({user:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:!0,index:!0},name:{type:String,required:!0,trim:!0},totalDays:{type:Number,required:!0,min:1,max:365},currentDay:{type:Number,default:0,min:0},startDate:{type:Date,default:Date.now},endDate:{type:Date,required:!0},isActive:{type:Boolean,default:!0},category:{type:String,trim:!0}},{timestamps:!0});et.pre("save",function(e){(this.isModified("totalDays")||this.isNew)&&(this.endDate=new Date(this.startDate),this.endDate.setDate(this.startDate.getDate()+this.totalDays)),e()});let er=i.models?.Challenge||(0,i.model)(o.Ml.CHALLENGE,et),ea=er,en=new i.Schema({challenge:{type:i.Schema.Types.ObjectId,ref:o.Ml.CHALLENGE,required:!0,index:!0},day:{type:Number,required:!0,min:1},progressText:{type:String,required:!0,trim:!0},hoursSpent:{type:Number,required:!0,min:0,max:24},nextGoals:[{type:String,trim:!0}],loggedAt:{type:Date,default:Date.now}},{timestamps:!0});en.index({challenge:1,day:1},{unique:!0});let ei=i.models?.ChallengeLog||(0,i.model)(o.Ml.CHALLENGE_LOG,en),eo=ei,es=new i.Schema({user:{type:i.Schema.Types.ObjectId,ref:"User",required:!0,unique:!0},note:{type:String},selectedAt:{type:Date,default:()=>new Date}},{timestamps:!0}),ed=i.models?.Mentorship||(0,i.model)(o.Ml.MENTORSHIP||"Mentorship",es),eu=ed,el=new i.Schema({user:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:!0},title:{type:String,required:!0},description:{type:String},timeSpent:{type:Number,required:!0},mentorFeedback:{type:String}},{timestamps:!0}),ec=i.models?.PrepLog||(0,i.model)(o.Ml.PREP_LOG,el),ep=ec,em=new i.Schema({user:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:!0},recruiterName:{type:String,required:!0},email:{type:String},phone:{type:String},company:{type:String},appliedPosition:{type:String},applicationStatus:{type:String,enum:o.LV},lastContacted:{type:String},comments:{type:String},follow_up_date:{type:String},last_interview_date:{type:String},link:{type:String}},{timestamps:!0}),ey=i.models?.Recruiters||(0,i.model)(o.Ml.RECRUITER,em),eg=ey,ef=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User ID is required"],index:!0},type:{type:String,enum:o.ww,required:[!0,"Subscription type is required"]},amount:{type:Number,required:[!0,"Amount is required"]},duration:{type:Number,required:[!0,"Duration in months is required"]},startDate:{type:Date,default:Date.now,required:!0},expiryDate:{type:Date,required:[!0,"Expiry date is required"]},isActive:{type:Boolean,default:!0},features:{type:[String],enum:o.Ir,default:[]}},{timestamps:!0,_id:!0,toObject:{virtuals:!0,transform:(e,t)=>(delete t.id,t)},toJSON:{virtuals:!0,transform:(e,t)=>(delete t.id,t)}});ef.index({userId:1,isActive:1}),ef.index({expiryDate:1});let eh=i.models?.PrepYatraSubscription||(0,i.model)(o.Ml.PREP_YATRA_SUBSCRIPTION,ef),eD=eh;var eS=r(5828);let eB=new i.Schema({chapterId:{type:String,default:eS.v4},chapterName:{type:String,required:!0},content:{type:String,required:!0},isOptional:{type:Boolean,default:!1}},{_id:!1}),eI=new i.Schema({sectionId:{type:String,required:!0},sectionName:{type:String,required:!0},chapters:[eB]},{_id:!1}),ew=new i.Schema({name:{type:String,required:!0},description:{type:String,required:!0},coverImageURL:{type:String,required:!0},slug:{type:String,required:!0},meta:{type:String},sections:[eI],requiredSkills:[{type:String,enum:o.i9,required:!0}],roadmap:{type:String,enum:o.bu,required:!0},difficultyLevel:{type:String,enum:o.xh,required:!0},isActive:{type:Boolean,default:!1}},{timestamps:!0}),eF=i.models?.Project||(0,i.model)(o.Ml.PROJECT,ew),eA=eF,eb=new i.Schema({chapterId:{type:String,required:[!0,"Chapter ID is required"]},isCompleted:{type:Boolean,default:!1}},{timestamps:!0,_id:!1}),eq=new i.Schema({sectionId:{type:String,required:[!0,"Section ID is required"]},chapters:[eb]},{timestamps:!0,_id:!1}),ev=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User ID is required"],index:!0},projectId:{type:i.Schema.Types.ObjectId,ref:o.Ml.PROJECT,required:[!0,"Project ID is required"],index:!0},sections:[eq]},{timestamps:!0,_id:!0,toObject:{virtuals:!0,transform:(e,t)=>(delete t.id,t)},toJSON:{virtuals:!0,transform:(e,t)=>(delete t.id,t)}});ev.virtual("project",{ref:o.Ml.PROJECT,localField:"projectId",foreignField:"_id",justOne:!0});let eU=i.models?.UserProject||(0,i.model)(o.Ml.USER_PROJECT,ev),eP=eU,eT=new i.Schema({question:{type:String,required:[!0,"Question is required"]},options:{type:[String],required:[!0,"Options are required"],validate:[{validator:e=>e.length>=2,message:"At least 2 options are required"}]},correctAnswer:{type:Number,required:[!0,"Correct answer index is required"]},explanation:{type:String,required:[!0,"Explanation is required"]},detailedExplanation:{type:String,required:[!0,"Detailed explanation is required"]},difficulty:{type:String,enum:["easy","medium","hard"],required:[!0,"Difficulty level is required"]}},{_id:!1}),eC=new i.Schema({categoryName:{type:String,required:[!0,"Category name is required"]},categoryDescription:{type:String,required:[!0,"Category description is required"]},categoryIcon:{type:String,required:[!0,"Category icon is required"]},questions:[eT],isActive:{type:Boolean,default:!0}},{timestamps:!0}),eO=i.models?.Quiz||(0,i.model)(o.Ml.QUIZ,eC),eE=eO,e$=new i.Schema({questionIndex:{type:Number,required:!0},selectedAnswer:{type:Number,default:null},isCorrect:{type:Boolean,required:!0},timeSpent:{type:Number,required:!0}},{_id:!1}),ex=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User ID is required"]},quizId:{type:i.Schema.Types.ObjectId,ref:o.Ml.QUIZ,required:[!0,"Quiz ID is required"]},categoryName:{type:String,required:[!0,"Category name is required"]},answers:[e$],score:{type:Number,required:[!0,"Score is required"]},totalQuestions:{type:Number,required:[!0,"Total questions is required"]},correctAnswers:{type:Number,required:[!0,"Correct answers count is required"]},timeTaken:{type:Number,required:[!0,"Time taken is required"]},pointsEarned:{type:Number,required:[!0,"Points earned is required"],default:0},completedAt:{type:Date,default:Date.now}},{timestamps:!0});ex.index({userId:1,completedAt:-1}),ex.index({userId:1,quizId:1});let eN=i.models?.QuizAttempt||(0,i.model)(o.Ml.QUIZ_ATTEMPT,ex),ej=eN,eL=new i.Schema({questionId:{type:i.Schema.Types.ObjectId,required:!0},question:{type:String,required:!0},options:{type:[String],required:!0},correctAnswer:{type:Number,required:!0},difficulty:{type:String,enum:["easy","medium","hard"],required:!0},explanation:{type:String,required:!0},detailedExplanation:{type:String,required:!0},userAnswer:{type:Number,default:null},isCorrect:{type:Boolean,default:null},timeSpent:{type:Number,default:null},answeredAt:{type:Date,default:null}},{_id:!1}),e_=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User ID is required"]},quizId:{type:i.Schema.Types.ObjectId,ref:o.Ml.QUIZ,required:[!0,"Quiz ID is required"]},categoryName:{type:String,required:[!0,"Category name is required"]},difficulty:{type:String,enum:["easy","medium","hard","mixed"],required:[!0,"Difficulty is required"]},questionCount:{type:Number,required:[!0,"Question count is required"],min:1,max:50},questions:[eL],status:{type:String,enum:["in_progress","completed","abandoned"],default:"in_progress"},startedAt:{type:Date,default:Date.now},completedAt:{type:Date,default:null},totalTime:{type:Number,default:null},score:{type:Number,default:null},percentage:{type:Number,default:null}},{timestamps:!0});e_.index({userId:1,startedAt:-1}),e_.index({userId:1,status:1}),e_.index({quizId:1,status:1});let eR=i.models?.QuizSession||(0,i.model)(o.Ml.QUIZ_SESSION,e_),ek=eR,eM=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User ID is required"]},questionId:{type:i.Schema.Types.ObjectId,required:[!0,"Question ID is required"]},categoryName:{type:String,required:[!0,"Category name is required"]},difficulty:{type:String,enum:["easy","medium","hard"],required:[!0,"Difficulty is required"]},attempts:{type:Number,default:0,min:0},correctAttempts:{type:Number,default:0,min:0},averageTime:{type:Number,default:0,min:0},lastAttemptedAt:{type:Date,default:Date.now},strengthLevel:{type:Number,default:0,min:0,max:1},nextReviewDate:{type:Date,default:Date.now},easeFactor:{type:Number,default:2.5,min:1.3},interval:{type:Number,default:1,min:1}},{timestamps:!0});eM.index({userId:1,questionId:1},{unique:!0}),eM.index({userId:1,nextReviewDate:1}),eM.index({userId:1,categoryName:1}),eM.index({userId:1,strengthLevel:1});let eQ=i.models?.UserQuestionPerformance||(0,i.model)(o.Ml.USER_QUESTION_PERFORMANCE,eM),ez=eQ,eW=new i.Schema({date:{type:Date,required:!0},score:{type:Number,required:!0,min:0,max:100},difficulty:{type:String,required:!0},timeSpent:{type:Number,required:!0,min:0}},{_id:!1}),eJ=new i.Schema({attempts:{type:Number,default:0,min:0},successRate:{type:Number,default:0,min:0,max:1}},{_id:!1}),eY=new i.Schema({easy:eJ,medium:eJ,hard:eJ},{_id:!1}),eH=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User ID is required"]},categoryName:{type:String,required:[!0,"Category name is required"]},totalAttempts:{type:Number,default:0,min:0},bestScore:{type:Number,default:0,min:0,max:100},averageScore:{type:Number,default:0,min:0,max:100},totalTimeSpent:{type:Number,default:0,min:0},strengthAreas:{type:[String],default:[]},improvementAreas:{type:[String],default:[]},difficultyPerformance:{type:eY,default:{easy:{attempts:0,successRate:0},medium:{attempts:0,successRate:0},hard:{attempts:0,successRate:0}}},progressTimeline:[eW],lastAttemptAt:{type:Date,default:Date.now}},{timestamps:!0});eH.index({userId:1,categoryName:1},{unique:!0}),eH.index({categoryName:1,bestScore:-1}),eH.index({categoryName:1,averageScore:-1});let eK=i.models?.UserQuizAnalytics||(0,i.model)(o.Ml.USER_QUIZ_ANALYTICS,eH),eG=eK,eZ=new i.Schema({name:{type:String,required:[!0,"Chapter Name is required"]},content:{type:String,required:[!0,"Chapter content is required"]},isOptional:{type:Boolean}},{timestamps:!0,_id:!0}),eV=new i.Schema({name:{type:String,required:[!0,"Course name is required"]},meta:{type:String},slug:{type:String,required:[!0,"Slug is required"]},coverImageURL:{type:String,required:[!0,"Course thumbnail is required"]},description:{type:String},liveOn:{type:Date,required:[!0,"Live on is required"]},isPremium:{type:Boolean,default:!1},price:{type:Number},chapters:[eZ],roadmap:{type:String,enum:o.bu,required:!0},difficultyLevel:{type:String,enum:o.xh,required:!0},features:[{type:String}]},{timestamps:!0,_id:!0,toObject:{virtuals:!0,transform:(e,t)=>(delete t.id,t)},toJSON:{virtuals:!0,transform:(e,t)=>(delete t.id,t)}}),eX=i.models?.Course||(0,i.model)(o.Ml.COURSE,eV),e0=eX,e1=new i.Schema({chapterId:{type:i.Schema.Types.ObjectId,ref:o.Ml.COURSE_CHAPTER,required:[!0,"Chapter id is required"]},isCompleted:{type:Boolean,default:!1},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}},{timestamps:!0,_id:!1}),e5=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User id is required"],index:!0},courseId:{type:i.Schema.Types.ObjectId,ref:o.Ml.COURSE,required:[!0,"Course id is required"],index:!0},chapters:[e1],isCompleted:{type:Boolean,default:!1},certificateId:{type:String,default:null}},{timestamps:!0,_id:!0,toObject:{virtuals:!0,transform:(e,t)=>(delete t.id,t)},toJSON:{virtuals:!0,transform:(e,t)=>(delete t.id,t)}});e5.virtual("course",{ref:o.Ml.COURSE,localField:"courseId",foreignField:"_id",justOne:!0});let e2=i.models?.UserCourse||(0,i.model)(o.Ml.USER_COURSE,e5),e6=e2,e3=new i.Schema({trendingSkills:[{_id:!1,name:String,count:Number}],topLocations:[{_id:!1,name:String,count:Number}],jobDomains:[{_id:!1,name:String,count:Number}],companyTypes:[{_id:!1,name:String,count:Number}]},{timestamps:!0}),e4=i.models.JobAggregate||(0,i.model)(o.Ml.JOB_AGGREGATE,e3),e7=e4,e8=new i.Schema({job_id:{type:String,required:!0},job_title:{type:String,required:!0},job_description:{type:String,required:!0},company:{id:{type:String,required:!0},name:{type:String,required:!0},email:{type:String},location:{type:String},linkedIn:{type:String},website:{type:String},description:{type:String},logo:{type:String},emp_count:{type:Number},company_founded:{type:Number}},skills:[{type:String,required:!0}],role:[{type:String,required:!0}],location:[{type:String,required:!0}],experience:{min:{type:Number},max:{type:Number}},jobUrl:{type:String,required:!0},salary:{min:{type:String},max:{type:String}},isInternship:{type:Boolean,default:!1},platform:{type:String,required:!0},postedAt:{type:Date,default:Date.now}},{timestamps:!0}),e9=i.models?.Job||(0,i.model)(o.Ml.JOB,e8),te=e9,tt=new i.Schema({title:{type:String,required:!0},videoId:{type:String,required:!0},thumbnail:{type:String,required:!0}},{_id:!1}),tr=new i.Schema({playlistId:{type:String,required:[!0,"Playlist ID is required"]},playlistName:{type:String,required:[!0,"Playlist Name is required"]},description:{type:String},referrerBy:{type:Number,default:0},thumbnail:{type:String,required:[!0,"Thumbnail URL is required"]},tags:{type:[String]},videos:[tt]},{timestamps:!0}),ta=i.models.Playlist||(0,i.model)(o.Ml.PLAYLIST,tr),tn=ta,ti=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:o.Ml.USER,required:[!0,"User ID is required"]},playlistId:{type:i.Schema.Types.ObjectId,ref:o.Ml.PLAYLIST,required:[!0,"Playlist ID is required"]},isPublic:{type:Boolean,default:!1},isRecommended:{type:Boolean,default:!1},learningTime:{type:Number,default:0}},{timestamps:!0});ti.virtual("Playlist",{ref:o.Ml.PLAYLIST,localField:"playlistId",foreignField:"_id",justOne:!0});let to=i.models.UserPlaylist||(0,i.model)(o.Ml.USER_PLAYLIST,ti),ts=to},7144:(e,t,r)=>{r.d(t,{Ft:()=>getActionsWithinDateRange,Ih:()=>getLeaderboardFromDB,PS:()=>updateUserPointsInDB,Z4:()=>addGamificationDocInDB,fo:()=>getUserPointsFromDB,handleGamificationPoints:()=>handleGamificationPoints});var a=r(5166),n=r(7074);let addGamificationDocInDB=async e=>{try{let t=new n.xp({userId:e});return await t.save(),{data:t}}catch(e){return{error:e}}},getUserPointsFromDB=async e=>{try{let t=await n.xp.findOne({userId:e});if(!t)return{error:"User not found"};return{data:t}}catch(e){return{error:"Error fetching user points"}}},updateUserPointsInDB=async(e,t)=>{try{let r=(0,a.oU)(t),i=await n.xp.findOneAndUpdate({userId:e},{$push:{actions:{actionType:t,pointsEarned:r}},$inc:{points:r}},{new:!0});if(!i)return{error:"User not found"};return{data:i}}catch(e){return{error:"Error updating user points"}}},deductUserPointsFromDB=async(e,t)=>{try{let r=(0,a.oU)(t),i=await n.xp.findOneAndUpdate({userId:e},[{$set:{points:{$max:[{$subtract:["$points",r]},0]}}}],{new:!0});if(!i)return{error:"User not found"};return{data:i}}catch(e){return{error:"Error reducing points"}}},handleGamificationPoints=async(e,t,r)=>{try{let{error:a,data:n}=e?await updateUserPointsInDB(t,r):await deductUserPointsFromDB(t,r);if(a)return{error:"Gamification action failed"};return{data:n}}catch(e){return{error:"Unexpected error in handleGamificationPoints"}}},getLeaderboardFromDB=async(e=10)=>{try{let t=await n.xp.aggregate([{$lookup:{from:"users",localField:"userId",foreignField:"_id",as:"user"}},{$unwind:"$user"},{$project:{userId:1,points:1,"user.name":1,"user.image":1,"user.email":1}},{$sort:{points:-1}},{$limit:e}]);return{data:t}}catch(e){return{error:"Error fetching leaderboard"}}},getActionsWithinDateRange=async(e,t)=>await n.xp.find({createdAt:{$gte:e,$lte:t}}).lean()}};